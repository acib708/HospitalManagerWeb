package thrift; /**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ReporteDoctoresPaciente implements org.apache.thrift.TBase<ReporteDoctoresPaciente, ReporteDoctoresPaciente._Fields>, java.io.Serializable, Cloneable, Comparable<ReporteDoctoresPaciente> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReporteDoctoresPaciente");

  private static final org.apache.thrift.protocol.TField CLAVE_PACIENTE_FIELD_DESC = new org.apache.thrift.protocol.TField("clavePaciente", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CLAVE_DOCTOR_FIELD_DESC = new org.apache.thrift.protocol.TField("claveDoctor", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField NOMBRE_PACIENTE_FIELD_DESC = new org.apache.thrift.protocol.TField("nombrePaciente", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField NOMBRE_DOCTOR_FIELD_DESC = new org.apache.thrift.protocol.TField("nombreDoctor", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField TRATAMIENTO_FIELD_DESC = new org.apache.thrift.protocol.TField("tratamiento", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField DIAGNOSTICO_FIELD_DESC = new org.apache.thrift.protocol.TField("diagnostico", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField FECHA_FIELD_DESC = new org.apache.thrift.protocol.TField("fecha", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField FOTO_DOCTOR_FIELD_DESC = new org.apache.thrift.protocol.TField("fotoDoctor", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField FOTO_PACIENTE_FIELD_DESC = new org.apache.thrift.protocol.TField("fotoPaciente", org.apache.thrift.protocol.TType.STRING, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ReporteDoctoresPacienteStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ReporteDoctoresPacienteTupleSchemeFactory());
  }

  public String clavePaciente; // required
  public String claveDoctor; // required
  public String nombrePaciente; // required
  public String nombreDoctor; // required
  public String tratamiento; // required
  public String diagnostico; // required
  public String fecha; // required
  public String fotoDoctor; // required
  public String fotoPaciente; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CLAVE_PACIENTE((short)1, "clavePaciente"),
    CLAVE_DOCTOR((short)2, "claveDoctor"),
    NOMBRE_PACIENTE((short)3, "nombrePaciente"),
    NOMBRE_DOCTOR((short)4, "nombreDoctor"),
    TRATAMIENTO((short)5, "tratamiento"),
    DIAGNOSTICO((short)6, "diagnostico"),
    FECHA((short)7, "fecha"),
    FOTO_DOCTOR((short)8, "fotoDoctor"),
    FOTO_PACIENTE((short)9, "fotoPaciente");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CLAVE_PACIENTE
          return CLAVE_PACIENTE;
        case 2: // CLAVE_DOCTOR
          return CLAVE_DOCTOR;
        case 3: // NOMBRE_PACIENTE
          return NOMBRE_PACIENTE;
        case 4: // NOMBRE_DOCTOR
          return NOMBRE_DOCTOR;
        case 5: // TRATAMIENTO
          return TRATAMIENTO;
        case 6: // DIAGNOSTICO
          return DIAGNOSTICO;
        case 7: // FECHA
          return FECHA;
        case 8: // FOTO_DOCTOR
          return FOTO_DOCTOR;
        case 9: // FOTO_PACIENTE
          return FOTO_PACIENTE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CLAVE_PACIENTE, new org.apache.thrift.meta_data.FieldMetaData("clavePaciente", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLAVE_DOCTOR, new org.apache.thrift.meta_data.FieldMetaData("claveDoctor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NOMBRE_PACIENTE, new org.apache.thrift.meta_data.FieldMetaData("nombrePaciente", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NOMBRE_DOCTOR, new org.apache.thrift.meta_data.FieldMetaData("nombreDoctor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRATAMIENTO, new org.apache.thrift.meta_data.FieldMetaData("tratamiento", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DIAGNOSTICO, new org.apache.thrift.meta_data.FieldMetaData("diagnostico", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FECHA, new org.apache.thrift.meta_data.FieldMetaData("fecha", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FOTO_DOCTOR, new org.apache.thrift.meta_data.FieldMetaData("fotoDoctor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FOTO_PACIENTE, new org.apache.thrift.meta_data.FieldMetaData("fotoPaciente", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReporteDoctoresPaciente.class, metaDataMap);
  }

  public ReporteDoctoresPaciente() {
  }

  public ReporteDoctoresPaciente(
    String clavePaciente,
    String claveDoctor,
    String nombrePaciente,
    String nombreDoctor,
    String tratamiento,
    String diagnostico,
    String fecha,
    String fotoDoctor,
    String fotoPaciente)
  {
    this();
    this.clavePaciente = clavePaciente;
    this.claveDoctor = claveDoctor;
    this.nombrePaciente = nombrePaciente;
    this.nombreDoctor = nombreDoctor;
    this.tratamiento = tratamiento;
    this.diagnostico = diagnostico;
    this.fecha = fecha;
    this.fotoDoctor = fotoDoctor;
    this.fotoPaciente = fotoPaciente;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ReporteDoctoresPaciente(ReporteDoctoresPaciente other) {
    if (other.isSetClavePaciente()) {
      this.clavePaciente = other.clavePaciente;
    }
    if (other.isSetClaveDoctor()) {
      this.claveDoctor = other.claveDoctor;
    }
    if (other.isSetNombrePaciente()) {
      this.nombrePaciente = other.nombrePaciente;
    }
    if (other.isSetNombreDoctor()) {
      this.nombreDoctor = other.nombreDoctor;
    }
    if (other.isSetTratamiento()) {
      this.tratamiento = other.tratamiento;
    }
    if (other.isSetDiagnostico()) {
      this.diagnostico = other.diagnostico;
    }
    if (other.isSetFecha()) {
      this.fecha = other.fecha;
    }
    if (other.isSetFotoDoctor()) {
      this.fotoDoctor = other.fotoDoctor;
    }
    if (other.isSetFotoPaciente()) {
      this.fotoPaciente = other.fotoPaciente;
    }
  }

  public ReporteDoctoresPaciente deepCopy() {
    return new ReporteDoctoresPaciente(this);
  }

  @Override
  public void clear() {
    this.clavePaciente = null;
    this.claveDoctor = null;
    this.nombrePaciente = null;
    this.nombreDoctor = null;
    this.tratamiento = null;
    this.diagnostico = null;
    this.fecha = null;
    this.fotoDoctor = null;
    this.fotoPaciente = null;
  }

  public String getClavePaciente() {
    return this.clavePaciente;
  }

  public ReporteDoctoresPaciente setClavePaciente(String clavePaciente) {
    this.clavePaciente = clavePaciente;
    return this;
  }

  public void unsetClavePaciente() {
    this.clavePaciente = null;
  }

  /** Returns true if field clavePaciente is set (has been assigned a value) and false otherwise */
  public boolean isSetClavePaciente() {
    return this.clavePaciente != null;
  }

  public void setClavePacienteIsSet(boolean value) {
    if (!value) {
      this.clavePaciente = null;
    }
  }

  public String getClaveDoctor() {
    return this.claveDoctor;
  }

  public ReporteDoctoresPaciente setClaveDoctor(String claveDoctor) {
    this.claveDoctor = claveDoctor;
    return this;
  }

  public void unsetClaveDoctor() {
    this.claveDoctor = null;
  }

  /** Returns true if field claveDoctor is set (has been assigned a value) and false otherwise */
  public boolean isSetClaveDoctor() {
    return this.claveDoctor != null;
  }

  public void setClaveDoctorIsSet(boolean value) {
    if (!value) {
      this.claveDoctor = null;
    }
  }

  public String getNombrePaciente() {
    return this.nombrePaciente;
  }

  public ReporteDoctoresPaciente setNombrePaciente(String nombrePaciente) {
    this.nombrePaciente = nombrePaciente;
    return this;
  }

  public void unsetNombrePaciente() {
    this.nombrePaciente = null;
  }

  /** Returns true if field nombrePaciente is set (has been assigned a value) and false otherwise */
  public boolean isSetNombrePaciente() {
    return this.nombrePaciente != null;
  }

  public void setNombrePacienteIsSet(boolean value) {
    if (!value) {
      this.nombrePaciente = null;
    }
  }

  public String getNombreDoctor() {
    return this.nombreDoctor;
  }

  public ReporteDoctoresPaciente setNombreDoctor(String nombreDoctor) {
    this.nombreDoctor = nombreDoctor;
    return this;
  }

  public void unsetNombreDoctor() {
    this.nombreDoctor = null;
  }

  /** Returns true if field nombreDoctor is set (has been assigned a value) and false otherwise */
  public boolean isSetNombreDoctor() {
    return this.nombreDoctor != null;
  }

  public void setNombreDoctorIsSet(boolean value) {
    if (!value) {
      this.nombreDoctor = null;
    }
  }

  public String getTratamiento() {
    return this.tratamiento;
  }

  public ReporteDoctoresPaciente setTratamiento(String tratamiento) {
    this.tratamiento = tratamiento;
    return this;
  }

  public void unsetTratamiento() {
    this.tratamiento = null;
  }

  /** Returns true if field tratamiento is set (has been assigned a value) and false otherwise */
  public boolean isSetTratamiento() {
    return this.tratamiento != null;
  }

  public void setTratamientoIsSet(boolean value) {
    if (!value) {
      this.tratamiento = null;
    }
  }

  public String getDiagnostico() {
    return this.diagnostico;
  }

  public ReporteDoctoresPaciente setDiagnostico(String diagnostico) {
    this.diagnostico = diagnostico;
    return this;
  }

  public void unsetDiagnostico() {
    this.diagnostico = null;
  }

  /** Returns true if field diagnostico is set (has been assigned a value) and false otherwise */
  public boolean isSetDiagnostico() {
    return this.diagnostico != null;
  }

  public void setDiagnosticoIsSet(boolean value) {
    if (!value) {
      this.diagnostico = null;
    }
  }

  public String getFecha() {
    return this.fecha;
  }

  public ReporteDoctoresPaciente setFecha(String fecha) {
    this.fecha = fecha;
    return this;
  }

  public void unsetFecha() {
    this.fecha = null;
  }

  /** Returns true if field fecha is set (has been assigned a value) and false otherwise */
  public boolean isSetFecha() {
    return this.fecha != null;
  }

  public void setFechaIsSet(boolean value) {
    if (!value) {
      this.fecha = null;
    }
  }

  public String getFotoDoctor() {
    return this.fotoDoctor;
  }

  public ReporteDoctoresPaciente setFotoDoctor(String fotoDoctor) {
    this.fotoDoctor = fotoDoctor;
    return this;
  }

  public void unsetFotoDoctor() {
    this.fotoDoctor = null;
  }

  /** Returns true if field fotoDoctor is set (has been assigned a value) and false otherwise */
  public boolean isSetFotoDoctor() {
    return this.fotoDoctor != null;
  }

  public void setFotoDoctorIsSet(boolean value) {
    if (!value) {
      this.fotoDoctor = null;
    }
  }

  public String getFotoPaciente() {
    return this.fotoPaciente;
  }

  public ReporteDoctoresPaciente setFotoPaciente(String fotoPaciente) {
    this.fotoPaciente = fotoPaciente;
    return this;
  }

  public void unsetFotoPaciente() {
    this.fotoPaciente = null;
  }

  /** Returns true if field fotoPaciente is set (has been assigned a value) and false otherwise */
  public boolean isSetFotoPaciente() {
    return this.fotoPaciente != null;
  }

  public void setFotoPacienteIsSet(boolean value) {
    if (!value) {
      this.fotoPaciente = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CLAVE_PACIENTE:
      if (value == null) {
        unsetClavePaciente();
      } else {
        setClavePaciente((String)value);
      }
      break;

    case CLAVE_DOCTOR:
      if (value == null) {
        unsetClaveDoctor();
      } else {
        setClaveDoctor((String)value);
      }
      break;

    case NOMBRE_PACIENTE:
      if (value == null) {
        unsetNombrePaciente();
      } else {
        setNombrePaciente((String)value);
      }
      break;

    case NOMBRE_DOCTOR:
      if (value == null) {
        unsetNombreDoctor();
      } else {
        setNombreDoctor((String)value);
      }
      break;

    case TRATAMIENTO:
      if (value == null) {
        unsetTratamiento();
      } else {
        setTratamiento((String)value);
      }
      break;

    case DIAGNOSTICO:
      if (value == null) {
        unsetDiagnostico();
      } else {
        setDiagnostico((String)value);
      }
      break;

    case FECHA:
      if (value == null) {
        unsetFecha();
      } else {
        setFecha((String)value);
      }
      break;

    case FOTO_DOCTOR:
      if (value == null) {
        unsetFotoDoctor();
      } else {
        setFotoDoctor((String)value);
      }
      break;

    case FOTO_PACIENTE:
      if (value == null) {
        unsetFotoPaciente();
      } else {
        setFotoPaciente((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CLAVE_PACIENTE:
      return getClavePaciente();

    case CLAVE_DOCTOR:
      return getClaveDoctor();

    case NOMBRE_PACIENTE:
      return getNombrePaciente();

    case NOMBRE_DOCTOR:
      return getNombreDoctor();

    case TRATAMIENTO:
      return getTratamiento();

    case DIAGNOSTICO:
      return getDiagnostico();

    case FECHA:
      return getFecha();

    case FOTO_DOCTOR:
      return getFotoDoctor();

    case FOTO_PACIENTE:
      return getFotoPaciente();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CLAVE_PACIENTE:
      return isSetClavePaciente();
    case CLAVE_DOCTOR:
      return isSetClaveDoctor();
    case NOMBRE_PACIENTE:
      return isSetNombrePaciente();
    case NOMBRE_DOCTOR:
      return isSetNombreDoctor();
    case TRATAMIENTO:
      return isSetTratamiento();
    case DIAGNOSTICO:
      return isSetDiagnostico();
    case FECHA:
      return isSetFecha();
    case FOTO_DOCTOR:
      return isSetFotoDoctor();
    case FOTO_PACIENTE:
      return isSetFotoPaciente();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ReporteDoctoresPaciente)
      return this.equals((ReporteDoctoresPaciente)that);
    return false;
  }

  public boolean equals(ReporteDoctoresPaciente that) {
    if (that == null)
      return false;

    boolean this_present_clavePaciente = true && this.isSetClavePaciente();
    boolean that_present_clavePaciente = true && that.isSetClavePaciente();
    if (this_present_clavePaciente || that_present_clavePaciente) {
      if (!(this_present_clavePaciente && that_present_clavePaciente))
        return false;
      if (!this.clavePaciente.equals(that.clavePaciente))
        return false;
    }

    boolean this_present_claveDoctor = true && this.isSetClaveDoctor();
    boolean that_present_claveDoctor = true && that.isSetClaveDoctor();
    if (this_present_claveDoctor || that_present_claveDoctor) {
      if (!(this_present_claveDoctor && that_present_claveDoctor))
        return false;
      if (!this.claveDoctor.equals(that.claveDoctor))
        return false;
    }

    boolean this_present_nombrePaciente = true && this.isSetNombrePaciente();
    boolean that_present_nombrePaciente = true && that.isSetNombrePaciente();
    if (this_present_nombrePaciente || that_present_nombrePaciente) {
      if (!(this_present_nombrePaciente && that_present_nombrePaciente))
        return false;
      if (!this.nombrePaciente.equals(that.nombrePaciente))
        return false;
    }

    boolean this_present_nombreDoctor = true && this.isSetNombreDoctor();
    boolean that_present_nombreDoctor = true && that.isSetNombreDoctor();
    if (this_present_nombreDoctor || that_present_nombreDoctor) {
      if (!(this_present_nombreDoctor && that_present_nombreDoctor))
        return false;
      if (!this.nombreDoctor.equals(that.nombreDoctor))
        return false;
    }

    boolean this_present_tratamiento = true && this.isSetTratamiento();
    boolean that_present_tratamiento = true && that.isSetTratamiento();
    if (this_present_tratamiento || that_present_tratamiento) {
      if (!(this_present_tratamiento && that_present_tratamiento))
        return false;
      if (!this.tratamiento.equals(that.tratamiento))
        return false;
    }

    boolean this_present_diagnostico = true && this.isSetDiagnostico();
    boolean that_present_diagnostico = true && that.isSetDiagnostico();
    if (this_present_diagnostico || that_present_diagnostico) {
      if (!(this_present_diagnostico && that_present_diagnostico))
        return false;
      if (!this.diagnostico.equals(that.diagnostico))
        return false;
    }

    boolean this_present_fecha = true && this.isSetFecha();
    boolean that_present_fecha = true && that.isSetFecha();
    if (this_present_fecha || that_present_fecha) {
      if (!(this_present_fecha && that_present_fecha))
        return false;
      if (!this.fecha.equals(that.fecha))
        return false;
    }

    boolean this_present_fotoDoctor = true && this.isSetFotoDoctor();
    boolean that_present_fotoDoctor = true && that.isSetFotoDoctor();
    if (this_present_fotoDoctor || that_present_fotoDoctor) {
      if (!(this_present_fotoDoctor && that_present_fotoDoctor))
        return false;
      if (!this.fotoDoctor.equals(that.fotoDoctor))
        return false;
    }

    boolean this_present_fotoPaciente = true && this.isSetFotoPaciente();
    boolean that_present_fotoPaciente = true && that.isSetFotoPaciente();
    if (this_present_fotoPaciente || that_present_fotoPaciente) {
      if (!(this_present_fotoPaciente && that_present_fotoPaciente))
        return false;
      if (!this.fotoPaciente.equals(that.fotoPaciente))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ReporteDoctoresPaciente other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetClavePaciente()).compareTo(other.isSetClavePaciente());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClavePaciente()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clavePaciente, other.clavePaciente);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClaveDoctor()).compareTo(other.isSetClaveDoctor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClaveDoctor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.claveDoctor, other.claveDoctor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNombrePaciente()).compareTo(other.isSetNombrePaciente());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNombrePaciente()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nombrePaciente, other.nombrePaciente);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNombreDoctor()).compareTo(other.isSetNombreDoctor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNombreDoctor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nombreDoctor, other.nombreDoctor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTratamiento()).compareTo(other.isSetTratamiento());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTratamiento()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tratamiento, other.tratamiento);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDiagnostico()).compareTo(other.isSetDiagnostico());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDiagnostico()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.diagnostico, other.diagnostico);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFecha()).compareTo(other.isSetFecha());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFecha()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fecha, other.fecha);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFotoDoctor()).compareTo(other.isSetFotoDoctor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFotoDoctor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fotoDoctor, other.fotoDoctor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFotoPaciente()).compareTo(other.isSetFotoPaciente());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFotoPaciente()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fotoPaciente, other.fotoPaciente);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ReporteDoctoresPaciente(");
    boolean first = true;

    sb.append("clavePaciente:");
    if (this.clavePaciente == null) {
      sb.append("null");
    } else {
      sb.append(this.clavePaciente);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("claveDoctor:");
    if (this.claveDoctor == null) {
      sb.append("null");
    } else {
      sb.append(this.claveDoctor);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nombrePaciente:");
    if (this.nombrePaciente == null) {
      sb.append("null");
    } else {
      sb.append(this.nombrePaciente);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nombreDoctor:");
    if (this.nombreDoctor == null) {
      sb.append("null");
    } else {
      sb.append(this.nombreDoctor);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tratamiento:");
    if (this.tratamiento == null) {
      sb.append("null");
    } else {
      sb.append(this.tratamiento);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("diagnostico:");
    if (this.diagnostico == null) {
      sb.append("null");
    } else {
      sb.append(this.diagnostico);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fecha:");
    if (this.fecha == null) {
      sb.append("null");
    } else {
      sb.append(this.fecha);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fotoDoctor:");
    if (this.fotoDoctor == null) {
      sb.append("null");
    } else {
      sb.append(this.fotoDoctor);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fotoPaciente:");
    if (this.fotoPaciente == null) {
      sb.append("null");
    } else {
      sb.append(this.fotoPaciente);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReporteDoctoresPacienteStandardSchemeFactory implements SchemeFactory {
    public ReporteDoctoresPacienteStandardScheme getScheme() {
      return new ReporteDoctoresPacienteStandardScheme();
    }
  }

  private static class ReporteDoctoresPacienteStandardScheme extends StandardScheme<ReporteDoctoresPaciente> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ReporteDoctoresPaciente struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CLAVE_PACIENTE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clavePaciente = iprot.readString();
              struct.setClavePacienteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CLAVE_DOCTOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.claveDoctor = iprot.readString();
              struct.setClaveDoctorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NOMBRE_PACIENTE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nombrePaciente = iprot.readString();
              struct.setNombrePacienteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NOMBRE_DOCTOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nombreDoctor = iprot.readString();
              struct.setNombreDoctorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TRATAMIENTO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tratamiento = iprot.readString();
              struct.setTratamientoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DIAGNOSTICO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.diagnostico = iprot.readString();
              struct.setDiagnosticoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // FECHA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fecha = iprot.readString();
              struct.setFechaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FOTO_DOCTOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fotoDoctor = iprot.readString();
              struct.setFotoDoctorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // FOTO_PACIENTE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fotoPaciente = iprot.readString();
              struct.setFotoPacienteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ReporteDoctoresPaciente struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.clavePaciente != null) {
        oprot.writeFieldBegin(CLAVE_PACIENTE_FIELD_DESC);
        oprot.writeString(struct.clavePaciente);
        oprot.writeFieldEnd();
      }
      if (struct.claveDoctor != null) {
        oprot.writeFieldBegin(CLAVE_DOCTOR_FIELD_DESC);
        oprot.writeString(struct.claveDoctor);
        oprot.writeFieldEnd();
      }
      if (struct.nombrePaciente != null) {
        oprot.writeFieldBegin(NOMBRE_PACIENTE_FIELD_DESC);
        oprot.writeString(struct.nombrePaciente);
        oprot.writeFieldEnd();
      }
      if (struct.nombreDoctor != null) {
        oprot.writeFieldBegin(NOMBRE_DOCTOR_FIELD_DESC);
        oprot.writeString(struct.nombreDoctor);
        oprot.writeFieldEnd();
      }
      if (struct.tratamiento != null) {
        oprot.writeFieldBegin(TRATAMIENTO_FIELD_DESC);
        oprot.writeString(struct.tratamiento);
        oprot.writeFieldEnd();
      }
      if (struct.diagnostico != null) {
        oprot.writeFieldBegin(DIAGNOSTICO_FIELD_DESC);
        oprot.writeString(struct.diagnostico);
        oprot.writeFieldEnd();
      }
      if (struct.fecha != null) {
        oprot.writeFieldBegin(FECHA_FIELD_DESC);
        oprot.writeString(struct.fecha);
        oprot.writeFieldEnd();
      }
      if (struct.fotoDoctor != null) {
        oprot.writeFieldBegin(FOTO_DOCTOR_FIELD_DESC);
        oprot.writeString(struct.fotoDoctor);
        oprot.writeFieldEnd();
      }
      if (struct.fotoPaciente != null) {
        oprot.writeFieldBegin(FOTO_PACIENTE_FIELD_DESC);
        oprot.writeString(struct.fotoPaciente);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReporteDoctoresPacienteTupleSchemeFactory implements SchemeFactory {
    public ReporteDoctoresPacienteTupleScheme getScheme() {
      return new ReporteDoctoresPacienteTupleScheme();
    }
  }

  private static class ReporteDoctoresPacienteTupleScheme extends TupleScheme<ReporteDoctoresPaciente> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ReporteDoctoresPaciente struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetClavePaciente()) {
        optionals.set(0);
      }
      if (struct.isSetClaveDoctor()) {
        optionals.set(1);
      }
      if (struct.isSetNombrePaciente()) {
        optionals.set(2);
      }
      if (struct.isSetNombreDoctor()) {
        optionals.set(3);
      }
      if (struct.isSetTratamiento()) {
        optionals.set(4);
      }
      if (struct.isSetDiagnostico()) {
        optionals.set(5);
      }
      if (struct.isSetFecha()) {
        optionals.set(6);
      }
      if (struct.isSetFotoDoctor()) {
        optionals.set(7);
      }
      if (struct.isSetFotoPaciente()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetClavePaciente()) {
        oprot.writeString(struct.clavePaciente);
      }
      if (struct.isSetClaveDoctor()) {
        oprot.writeString(struct.claveDoctor);
      }
      if (struct.isSetNombrePaciente()) {
        oprot.writeString(struct.nombrePaciente);
      }
      if (struct.isSetNombreDoctor()) {
        oprot.writeString(struct.nombreDoctor);
      }
      if (struct.isSetTratamiento()) {
        oprot.writeString(struct.tratamiento);
      }
      if (struct.isSetDiagnostico()) {
        oprot.writeString(struct.diagnostico);
      }
      if (struct.isSetFecha()) {
        oprot.writeString(struct.fecha);
      }
      if (struct.isSetFotoDoctor()) {
        oprot.writeString(struct.fotoDoctor);
      }
      if (struct.isSetFotoPaciente()) {
        oprot.writeString(struct.fotoPaciente);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ReporteDoctoresPaciente struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.clavePaciente = iprot.readString();
        struct.setClavePacienteIsSet(true);
      }
      if (incoming.get(1)) {
        struct.claveDoctor = iprot.readString();
        struct.setClaveDoctorIsSet(true);
      }
      if (incoming.get(2)) {
        struct.nombrePaciente = iprot.readString();
        struct.setNombrePacienteIsSet(true);
      }
      if (incoming.get(3)) {
        struct.nombreDoctor = iprot.readString();
        struct.setNombreDoctorIsSet(true);
      }
      if (incoming.get(4)) {
        struct.tratamiento = iprot.readString();
        struct.setTratamientoIsSet(true);
      }
      if (incoming.get(5)) {
        struct.diagnostico = iprot.readString();
        struct.setDiagnosticoIsSet(true);
      }
      if (incoming.get(6)) {
        struct.fecha = iprot.readString();
        struct.setFechaIsSet(true);
      }
      if (incoming.get(7)) {
        struct.fotoDoctor = iprot.readString();
        struct.setFotoDoctorIsSet(true);
      }
      if (incoming.get(8)) {
        struct.fotoPaciente = iprot.readString();
        struct.setFotoPacienteIsSet(true);
      }
    }
  }

}

