package thrift; /**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Actions {

  public interface Iface {

    public boolean actualizarAnalisis(AnalisisClinico analisis) throws org.apache.thrift.TException;

    public boolean actualizarDoctor(Doctor doctor) throws org.apache.thrift.TException;

    public boolean actualizarPaciente(Paciente paciente) throws org.apache.thrift.TException;

    public boolean borrarAnalisis(String claveAnalisis) throws org.apache.thrift.TException;

    public boolean borrarDoctor(String claveDoctor) throws org.apache.thrift.TException;

    public boolean borrarPaciente(String clavePaciente) throws org.apache.thrift.TException;

    public boolean capturarAnalisis(AnalisisClinico analisis) throws org.apache.thrift.TException;

    public boolean capturarDoctor(Doctor doctor) throws org.apache.thrift.TException;

    public boolean capturarPaciente(Paciente paciente) throws org.apache.thrift.TException;

    public boolean capturarAtiende(Atiende atiende) throws org.apache.thrift.TException;

    public boolean capturarSeRealiza(SeRealiza seRealiza) throws org.apache.thrift.TException;

    public List<AnalisisClinico> consultarAnalisis() throws org.apache.thrift.TException;

    public List<Atiende> consultarAtiende() throws org.apache.thrift.TException;

    public List<Doctor> consultarDoctores() throws org.apache.thrift.TException;

    public List<Paciente> consultarPacientes() throws org.apache.thrift.TException;

    public List<SeRealiza> consultarSeRealiza() throws org.apache.thrift.TException;

    public AnalisisClinico consultarAnalisisClave(String clave) throws org.apache.thrift.TException;

    public Paciente consultarPacienteClave(String clave) throws org.apache.thrift.TException;

    public Doctor consultarDoctorClave(String clave) throws org.apache.thrift.TException;

    public List<AnalisisClinico> consultarAnalisisTipo(String tipo) throws org.apache.thrift.TException;

    public List<Doctor> consultarDoctoresEspecialidad(String especialidad) throws org.apache.thrift.TException;

    public List<ReporteAnalisisPaciente> generarReporteAnalisisPaciente(String clavePaciente) throws org.apache.thrift.TException;

    public List<ReportePacientesAnalisis> generarReportePacientesAnalisis(String claveAnalisis) throws org.apache.thrift.TException;

    public List<ReporteDoctoresPaciente> generarReporteDoctoresPaciente(String clavePaciente) throws org.apache.thrift.TException;

    public List<ReportePacientesDoctor> generarReportePacientesDoctor(String claveDoctor) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void actualizarAnalisis(AnalisisClinico analisis, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void actualizarDoctor(Doctor doctor, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void actualizarPaciente(Paciente paciente, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void borrarAnalisis(String claveAnalisis, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void borrarDoctor(String claveDoctor, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void borrarPaciente(String clavePaciente, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void capturarAnalisis(AnalisisClinico analisis, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void capturarDoctor(Doctor doctor, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void capturarPaciente(Paciente paciente, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void capturarAtiende(Atiende atiende, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void capturarSeRealiza(SeRealiza seRealiza, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void consultarAnalisis(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void consultarAtiende(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void consultarDoctores(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void consultarPacientes(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void consultarSeRealiza(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void consultarAnalisisClave(String clave, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void consultarPacienteClave(String clave, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void consultarDoctorClave(String clave, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void consultarAnalisisTipo(String tipo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void consultarDoctoresEspecialidad(String especialidad, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void generarReporteAnalisisPaciente(String clavePaciente, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void generarReportePacientesAnalisis(String claveAnalisis, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void generarReporteDoctoresPaciente(String clavePaciente, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void generarReportePacientesDoctor(String claveDoctor, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public boolean actualizarAnalisis(AnalisisClinico analisis) throws org.apache.thrift.TException
    {
      send_actualizarAnalisis(analisis);
      return recv_actualizarAnalisis();
    }

    public void send_actualizarAnalisis(AnalisisClinico analisis) throws org.apache.thrift.TException
    {
      actualizarAnalisis_args args = new actualizarAnalisis_args();
      args.setAnalisis(analisis);
      sendBase("actualizarAnalisis", args);
    }

    public boolean recv_actualizarAnalisis() throws org.apache.thrift.TException
    {
      actualizarAnalisis_result result = new actualizarAnalisis_result();
      receiveBase(result, "actualizarAnalisis");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "actualizarAnalisis failed: unknown result");
    }

    public boolean actualizarDoctor(Doctor doctor) throws org.apache.thrift.TException
    {
      send_actualizarDoctor(doctor);
      return recv_actualizarDoctor();
    }

    public void send_actualizarDoctor(Doctor doctor) throws org.apache.thrift.TException
    {
      actualizarDoctor_args args = new actualizarDoctor_args();
      args.setDoctor(doctor);
      sendBase("actualizarDoctor", args);
    }

    public boolean recv_actualizarDoctor() throws org.apache.thrift.TException
    {
      actualizarDoctor_result result = new actualizarDoctor_result();
      receiveBase(result, "actualizarDoctor");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "actualizarDoctor failed: unknown result");
    }

    public boolean actualizarPaciente(Paciente paciente) throws org.apache.thrift.TException
    {
      send_actualizarPaciente(paciente);
      return recv_actualizarPaciente();
    }

    public void send_actualizarPaciente(Paciente paciente) throws org.apache.thrift.TException
    {
      actualizarPaciente_args args = new actualizarPaciente_args();
      args.setPaciente(paciente);
      sendBase("actualizarPaciente", args);
    }

    public boolean recv_actualizarPaciente() throws org.apache.thrift.TException
    {
      actualizarPaciente_result result = new actualizarPaciente_result();
      receiveBase(result, "actualizarPaciente");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "actualizarPaciente failed: unknown result");
    }

    public boolean borrarAnalisis(String claveAnalisis) throws org.apache.thrift.TException
    {
      send_borrarAnalisis(claveAnalisis);
      return recv_borrarAnalisis();
    }

    public void send_borrarAnalisis(String claveAnalisis) throws org.apache.thrift.TException
    {
      borrarAnalisis_args args = new borrarAnalisis_args();
      args.setClaveAnalisis(claveAnalisis);
      sendBase("borrarAnalisis", args);
    }

    public boolean recv_borrarAnalisis() throws org.apache.thrift.TException
    {
      borrarAnalisis_result result = new borrarAnalisis_result();
      receiveBase(result, "borrarAnalisis");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "borrarAnalisis failed: unknown result");
    }

    public boolean borrarDoctor(String claveDoctor) throws org.apache.thrift.TException
    {
      send_borrarDoctor(claveDoctor);
      return recv_borrarDoctor();
    }

    public void send_borrarDoctor(String claveDoctor) throws org.apache.thrift.TException
    {
      borrarDoctor_args args = new borrarDoctor_args();
      args.setClaveDoctor(claveDoctor);
      sendBase("borrarDoctor", args);
    }

    public boolean recv_borrarDoctor() throws org.apache.thrift.TException
    {
      borrarDoctor_result result = new borrarDoctor_result();
      receiveBase(result, "borrarDoctor");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "borrarDoctor failed: unknown result");
    }

    public boolean borrarPaciente(String clavePaciente) throws org.apache.thrift.TException
    {
      send_borrarPaciente(clavePaciente);
      return recv_borrarPaciente();
    }

    public void send_borrarPaciente(String clavePaciente) throws org.apache.thrift.TException
    {
      borrarPaciente_args args = new borrarPaciente_args();
      args.setClavePaciente(clavePaciente);
      sendBase("borrarPaciente", args);
    }

    public boolean recv_borrarPaciente() throws org.apache.thrift.TException
    {
      borrarPaciente_result result = new borrarPaciente_result();
      receiveBase(result, "borrarPaciente");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "borrarPaciente failed: unknown result");
    }

    public boolean capturarAnalisis(AnalisisClinico analisis) throws org.apache.thrift.TException
    {
      send_capturarAnalisis(analisis);
      return recv_capturarAnalisis();
    }

    public void send_capturarAnalisis(AnalisisClinico analisis) throws org.apache.thrift.TException
    {
      capturarAnalisis_args args = new capturarAnalisis_args();
      args.setAnalisis(analisis);
      sendBase("capturarAnalisis", args);
    }

    public boolean recv_capturarAnalisis() throws org.apache.thrift.TException
    {
      capturarAnalisis_result result = new capturarAnalisis_result();
      receiveBase(result, "capturarAnalisis");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "capturarAnalisis failed: unknown result");
    }

    public boolean capturarDoctor(Doctor doctor) throws org.apache.thrift.TException
    {
      send_capturarDoctor(doctor);
      return recv_capturarDoctor();
    }

    public void send_capturarDoctor(Doctor doctor) throws org.apache.thrift.TException
    {
      capturarDoctor_args args = new capturarDoctor_args();
      args.setDoctor(doctor);
      sendBase("capturarDoctor", args);
    }

    public boolean recv_capturarDoctor() throws org.apache.thrift.TException
    {
      capturarDoctor_result result = new capturarDoctor_result();
      receiveBase(result, "capturarDoctor");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "capturarDoctor failed: unknown result");
    }

    public boolean capturarPaciente(Paciente paciente) throws org.apache.thrift.TException
    {
      send_capturarPaciente(paciente);
      return recv_capturarPaciente();
    }

    public void send_capturarPaciente(Paciente paciente) throws org.apache.thrift.TException
    {
      capturarPaciente_args args = new capturarPaciente_args();
      args.setPaciente(paciente);
      sendBase("capturarPaciente", args);
    }

    public boolean recv_capturarPaciente() throws org.apache.thrift.TException
    {
      capturarPaciente_result result = new capturarPaciente_result();
      receiveBase(result, "capturarPaciente");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "capturarPaciente failed: unknown result");
    }

    public boolean capturarAtiende(Atiende atiende) throws org.apache.thrift.TException
    {
      send_capturarAtiende(atiende);
      return recv_capturarAtiende();
    }

    public void send_capturarAtiende(Atiende atiende) throws org.apache.thrift.TException
    {
      capturarAtiende_args args = new capturarAtiende_args();
      args.setAtiende(atiende);
      sendBase("capturarAtiende", args);
    }

    public boolean recv_capturarAtiende() throws org.apache.thrift.TException
    {
      capturarAtiende_result result = new capturarAtiende_result();
      receiveBase(result, "capturarAtiende");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "capturarAtiende failed: unknown result");
    }

    public boolean capturarSeRealiza(SeRealiza seRealiza) throws org.apache.thrift.TException
    {
      send_capturarSeRealiza(seRealiza);
      return recv_capturarSeRealiza();
    }

    public void send_capturarSeRealiza(SeRealiza seRealiza) throws org.apache.thrift.TException
    {
      capturarSeRealiza_args args = new capturarSeRealiza_args();
      args.setSeRealiza(seRealiza);
      sendBase("capturarSeRealiza", args);
    }

    public boolean recv_capturarSeRealiza() throws org.apache.thrift.TException
    {
      capturarSeRealiza_result result = new capturarSeRealiza_result();
      receiveBase(result, "capturarSeRealiza");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "capturarSeRealiza failed: unknown result");
    }

    public List<AnalisisClinico> consultarAnalisis() throws org.apache.thrift.TException
    {
      send_consultarAnalisis();
      return recv_consultarAnalisis();
    }

    public void send_consultarAnalisis() throws org.apache.thrift.TException
    {
      consultarAnalisis_args args = new consultarAnalisis_args();
      sendBase("consultarAnalisis", args);
    }

    public List<AnalisisClinico> recv_consultarAnalisis() throws org.apache.thrift.TException
    {
      consultarAnalisis_result result = new consultarAnalisis_result();
      receiveBase(result, "consultarAnalisis");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "consultarAnalisis failed: unknown result");
    }

    public List<Atiende> consultarAtiende() throws org.apache.thrift.TException
    {
      send_consultarAtiende();
      return recv_consultarAtiende();
    }

    public void send_consultarAtiende() throws org.apache.thrift.TException
    {
      consultarAtiende_args args = new consultarAtiende_args();
      sendBase("consultarAtiende", args);
    }

    public List<Atiende> recv_consultarAtiende() throws org.apache.thrift.TException
    {
      consultarAtiende_result result = new consultarAtiende_result();
      receiveBase(result, "consultarAtiende");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "consultarAtiende failed: unknown result");
    }

    public List<Doctor> consultarDoctores() throws org.apache.thrift.TException
    {
      send_consultarDoctores();
      return recv_consultarDoctores();
    }

    public void send_consultarDoctores() throws org.apache.thrift.TException
    {
      consultarDoctores_args args = new consultarDoctores_args();
      sendBase("consultarDoctores", args);
    }

    public List<Doctor> recv_consultarDoctores() throws org.apache.thrift.TException
    {
      consultarDoctores_result result = new consultarDoctores_result();
      receiveBase(result, "consultarDoctores");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "consultarDoctores failed: unknown result");
    }

    public List<Paciente> consultarPacientes() throws org.apache.thrift.TException
    {
      send_consultarPacientes();
      return recv_consultarPacientes();
    }

    public void send_consultarPacientes() throws org.apache.thrift.TException
    {
      consultarPacientes_args args = new consultarPacientes_args();
      sendBase("consultarPacientes", args);
    }

    public List<Paciente> recv_consultarPacientes() throws org.apache.thrift.TException
    {
      consultarPacientes_result result = new consultarPacientes_result();
      receiveBase(result, "consultarPacientes");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "consultarPacientes failed: unknown result");
    }

    public List<SeRealiza> consultarSeRealiza() throws org.apache.thrift.TException
    {
      send_consultarSeRealiza();
      return recv_consultarSeRealiza();
    }

    public void send_consultarSeRealiza() throws org.apache.thrift.TException
    {
      consultarSeRealiza_args args = new consultarSeRealiza_args();
      sendBase("consultarSeRealiza", args);
    }

    public List<SeRealiza> recv_consultarSeRealiza() throws org.apache.thrift.TException
    {
      consultarSeRealiza_result result = new consultarSeRealiza_result();
      receiveBase(result, "consultarSeRealiza");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "consultarSeRealiza failed: unknown result");
    }

    public AnalisisClinico consultarAnalisisClave(String clave) throws org.apache.thrift.TException
    {
      send_consultarAnalisisClave(clave);
      return recv_consultarAnalisisClave();
    }

    public void send_consultarAnalisisClave(String clave) throws org.apache.thrift.TException
    {
      consultarAnalisisClave_args args = new consultarAnalisisClave_args();
      args.setClave(clave);
      sendBase("consultarAnalisisClave", args);
    }

    public AnalisisClinico recv_consultarAnalisisClave() throws org.apache.thrift.TException
    {
      consultarAnalisisClave_result result = new consultarAnalisisClave_result();
      receiveBase(result, "consultarAnalisisClave");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "consultarAnalisisClave failed: unknown result");
    }

    public Paciente consultarPacienteClave(String clave) throws org.apache.thrift.TException
    {
      send_consultarPacienteClave(clave);
      return recv_consultarPacienteClave();
    }

    public void send_consultarPacienteClave(String clave) throws org.apache.thrift.TException
    {
      consultarPacienteClave_args args = new consultarPacienteClave_args();
      args.setClave(clave);
      sendBase("consultarPacienteClave", args);
    }

    public Paciente recv_consultarPacienteClave() throws org.apache.thrift.TException
    {
      consultarPacienteClave_result result = new consultarPacienteClave_result();
      receiveBase(result, "consultarPacienteClave");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "consultarPacienteClave failed: unknown result");
    }

    public Doctor consultarDoctorClave(String clave) throws org.apache.thrift.TException
    {
      send_consultarDoctorClave(clave);
      return recv_consultarDoctorClave();
    }

    public void send_consultarDoctorClave(String clave) throws org.apache.thrift.TException
    {
      consultarDoctorClave_args args = new consultarDoctorClave_args();
      args.setClave(clave);
      sendBase("consultarDoctorClave", args);
    }

    public Doctor recv_consultarDoctorClave() throws org.apache.thrift.TException
    {
      consultarDoctorClave_result result = new consultarDoctorClave_result();
      receiveBase(result, "consultarDoctorClave");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "consultarDoctorClave failed: unknown result");
    }

    public List<AnalisisClinico> consultarAnalisisTipo(String tipo) throws org.apache.thrift.TException
    {
      send_consultarAnalisisTipo(tipo);
      return recv_consultarAnalisisTipo();
    }

    public void send_consultarAnalisisTipo(String tipo) throws org.apache.thrift.TException
    {
      consultarAnalisisTipo_args args = new consultarAnalisisTipo_args();
      args.setTipo(tipo);
      sendBase("consultarAnalisisTipo", args);
    }

    public List<AnalisisClinico> recv_consultarAnalisisTipo() throws org.apache.thrift.TException
    {
      consultarAnalisisTipo_result result = new consultarAnalisisTipo_result();
      receiveBase(result, "consultarAnalisisTipo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "consultarAnalisisTipo failed: unknown result");
    }

    public List<Doctor> consultarDoctoresEspecialidad(String especialidad) throws org.apache.thrift.TException
    {
      send_consultarDoctoresEspecialidad(especialidad);
      return recv_consultarDoctoresEspecialidad();
    }

    public void send_consultarDoctoresEspecialidad(String especialidad) throws org.apache.thrift.TException
    {
      consultarDoctoresEspecialidad_args args = new consultarDoctoresEspecialidad_args();
      args.setEspecialidad(especialidad);
      sendBase("consultarDoctoresEspecialidad", args);
    }

    public List<Doctor> recv_consultarDoctoresEspecialidad() throws org.apache.thrift.TException
    {
      consultarDoctoresEspecialidad_result result = new consultarDoctoresEspecialidad_result();
      receiveBase(result, "consultarDoctoresEspecialidad");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "consultarDoctoresEspecialidad failed: unknown result");
    }

    public List<ReporteAnalisisPaciente> generarReporteAnalisisPaciente(String clavePaciente) throws org.apache.thrift.TException
    {
      send_generarReporteAnalisisPaciente(clavePaciente);
      return recv_generarReporteAnalisisPaciente();
    }

    public void send_generarReporteAnalisisPaciente(String clavePaciente) throws org.apache.thrift.TException
    {
      generarReporteAnalisisPaciente_args args = new generarReporteAnalisisPaciente_args();
      args.setClavePaciente(clavePaciente);
      sendBase("generarReporteAnalisisPaciente", args);
    }

    public List<ReporteAnalisisPaciente> recv_generarReporteAnalisisPaciente() throws org.apache.thrift.TException
    {
      generarReporteAnalisisPaciente_result result = new generarReporteAnalisisPaciente_result();
      receiveBase(result, "generarReporteAnalisisPaciente");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "generarReporteAnalisisPaciente failed: unknown result");
    }

    public List<ReportePacientesAnalisis> generarReportePacientesAnalisis(String claveAnalisis) throws org.apache.thrift.TException
    {
      send_generarReportePacientesAnalisis(claveAnalisis);
      return recv_generarReportePacientesAnalisis();
    }

    public void send_generarReportePacientesAnalisis(String claveAnalisis) throws org.apache.thrift.TException
    {
      generarReportePacientesAnalisis_args args = new generarReportePacientesAnalisis_args();
      args.setClaveAnalisis(claveAnalisis);
      sendBase("generarReportePacientesAnalisis", args);
    }

    public List<ReportePacientesAnalisis> recv_generarReportePacientesAnalisis() throws org.apache.thrift.TException
    {
      generarReportePacientesAnalisis_result result = new generarReportePacientesAnalisis_result();
      receiveBase(result, "generarReportePacientesAnalisis");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "generarReportePacientesAnalisis failed: unknown result");
    }

    public List<ReporteDoctoresPaciente> generarReporteDoctoresPaciente(String clavePaciente) throws org.apache.thrift.TException
    {
      send_generarReporteDoctoresPaciente(clavePaciente);
      return recv_generarReporteDoctoresPaciente();
    }

    public void send_generarReporteDoctoresPaciente(String clavePaciente) throws org.apache.thrift.TException
    {
      generarReporteDoctoresPaciente_args args = new generarReporteDoctoresPaciente_args();
      args.setClavePaciente(clavePaciente);
      sendBase("generarReporteDoctoresPaciente", args);
    }

    public List<ReporteDoctoresPaciente> recv_generarReporteDoctoresPaciente() throws org.apache.thrift.TException
    {
      generarReporteDoctoresPaciente_result result = new generarReporteDoctoresPaciente_result();
      receiveBase(result, "generarReporteDoctoresPaciente");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "generarReporteDoctoresPaciente failed: unknown result");
    }

    public List<ReportePacientesDoctor> generarReportePacientesDoctor(String claveDoctor) throws org.apache.thrift.TException
    {
      send_generarReportePacientesDoctor(claveDoctor);
      return recv_generarReportePacientesDoctor();
    }

    public void send_generarReportePacientesDoctor(String claveDoctor) throws org.apache.thrift.TException
    {
      generarReportePacientesDoctor_args args = new generarReportePacientesDoctor_args();
      args.setClaveDoctor(claveDoctor);
      sendBase("generarReportePacientesDoctor", args);
    }

    public List<ReportePacientesDoctor> recv_generarReportePacientesDoctor() throws org.apache.thrift.TException
    {
      generarReportePacientesDoctor_result result = new generarReportePacientesDoctor_result();
      receiveBase(result, "generarReportePacientesDoctor");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "generarReportePacientesDoctor failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void actualizarAnalisis(AnalisisClinico analisis, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      actualizarAnalisis_call method_call = new actualizarAnalisis_call(analisis, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class actualizarAnalisis_call extends org.apache.thrift.async.TAsyncMethodCall {
      private AnalisisClinico analisis;
      public actualizarAnalisis_call(AnalisisClinico analisis, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.analisis = analisis;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("actualizarAnalisis", org.apache.thrift.protocol.TMessageType.CALL, 0));
        actualizarAnalisis_args args = new actualizarAnalisis_args();
        args.setAnalisis(analisis);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_actualizarAnalisis();
      }
    }

    public void actualizarDoctor(Doctor doctor, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      actualizarDoctor_call method_call = new actualizarDoctor_call(doctor, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class actualizarDoctor_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Doctor doctor;
      public actualizarDoctor_call(Doctor doctor, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.doctor = doctor;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("actualizarDoctor", org.apache.thrift.protocol.TMessageType.CALL, 0));
        actualizarDoctor_args args = new actualizarDoctor_args();
        args.setDoctor(doctor);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_actualizarDoctor();
      }
    }

    public void actualizarPaciente(Paciente paciente, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      actualizarPaciente_call method_call = new actualizarPaciente_call(paciente, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class actualizarPaciente_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Paciente paciente;
      public actualizarPaciente_call(Paciente paciente, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.paciente = paciente;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("actualizarPaciente", org.apache.thrift.protocol.TMessageType.CALL, 0));
        actualizarPaciente_args args = new actualizarPaciente_args();
        args.setPaciente(paciente);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_actualizarPaciente();
      }
    }

    public void borrarAnalisis(String claveAnalisis, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      borrarAnalisis_call method_call = new borrarAnalisis_call(claveAnalisis, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class borrarAnalisis_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String claveAnalisis;
      public borrarAnalisis_call(String claveAnalisis, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.claveAnalisis = claveAnalisis;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("borrarAnalisis", org.apache.thrift.protocol.TMessageType.CALL, 0));
        borrarAnalisis_args args = new borrarAnalisis_args();
        args.setClaveAnalisis(claveAnalisis);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_borrarAnalisis();
      }
    }

    public void borrarDoctor(String claveDoctor, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      borrarDoctor_call method_call = new borrarDoctor_call(claveDoctor, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class borrarDoctor_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String claveDoctor;
      public borrarDoctor_call(String claveDoctor, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.claveDoctor = claveDoctor;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("borrarDoctor", org.apache.thrift.protocol.TMessageType.CALL, 0));
        borrarDoctor_args args = new borrarDoctor_args();
        args.setClaveDoctor(claveDoctor);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_borrarDoctor();
      }
    }

    public void borrarPaciente(String clavePaciente, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      borrarPaciente_call method_call = new borrarPaciente_call(clavePaciente, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class borrarPaciente_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clavePaciente;
      public borrarPaciente_call(String clavePaciente, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clavePaciente = clavePaciente;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("borrarPaciente", org.apache.thrift.protocol.TMessageType.CALL, 0));
        borrarPaciente_args args = new borrarPaciente_args();
        args.setClavePaciente(clavePaciente);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_borrarPaciente();
      }
    }

    public void capturarAnalisis(AnalisisClinico analisis, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      capturarAnalisis_call method_call = new capturarAnalisis_call(analisis, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class capturarAnalisis_call extends org.apache.thrift.async.TAsyncMethodCall {
      private AnalisisClinico analisis;
      public capturarAnalisis_call(AnalisisClinico analisis, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.analisis = analisis;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("capturarAnalisis", org.apache.thrift.protocol.TMessageType.CALL, 0));
        capturarAnalisis_args args = new capturarAnalisis_args();
        args.setAnalisis(analisis);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_capturarAnalisis();
      }
    }

    public void capturarDoctor(Doctor doctor, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      capturarDoctor_call method_call = new capturarDoctor_call(doctor, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class capturarDoctor_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Doctor doctor;
      public capturarDoctor_call(Doctor doctor, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.doctor = doctor;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("capturarDoctor", org.apache.thrift.protocol.TMessageType.CALL, 0));
        capturarDoctor_args args = new capturarDoctor_args();
        args.setDoctor(doctor);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_capturarDoctor();
      }
    }

    public void capturarPaciente(Paciente paciente, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      capturarPaciente_call method_call = new capturarPaciente_call(paciente, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class capturarPaciente_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Paciente paciente;
      public capturarPaciente_call(Paciente paciente, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.paciente = paciente;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("capturarPaciente", org.apache.thrift.protocol.TMessageType.CALL, 0));
        capturarPaciente_args args = new capturarPaciente_args();
        args.setPaciente(paciente);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_capturarPaciente();
      }
    }

    public void capturarAtiende(Atiende atiende, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      capturarAtiende_call method_call = new capturarAtiende_call(atiende, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class capturarAtiende_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Atiende atiende;
      public capturarAtiende_call(Atiende atiende, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.atiende = atiende;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("capturarAtiende", org.apache.thrift.protocol.TMessageType.CALL, 0));
        capturarAtiende_args args = new capturarAtiende_args();
        args.setAtiende(atiende);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_capturarAtiende();
      }
    }

    public void capturarSeRealiza(SeRealiza seRealiza, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      capturarSeRealiza_call method_call = new capturarSeRealiza_call(seRealiza, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class capturarSeRealiza_call extends org.apache.thrift.async.TAsyncMethodCall {
      private SeRealiza seRealiza;
      public capturarSeRealiza_call(SeRealiza seRealiza, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.seRealiza = seRealiza;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("capturarSeRealiza", org.apache.thrift.protocol.TMessageType.CALL, 0));
        capturarSeRealiza_args args = new capturarSeRealiza_args();
        args.setSeRealiza(seRealiza);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_capturarSeRealiza();
      }
    }

    public void consultarAnalisis(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      consultarAnalisis_call method_call = new consultarAnalisis_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class consultarAnalisis_call extends org.apache.thrift.async.TAsyncMethodCall {
      public consultarAnalisis_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("consultarAnalisis", org.apache.thrift.protocol.TMessageType.CALL, 0));
        consultarAnalisis_args args = new consultarAnalisis_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<AnalisisClinico> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_consultarAnalisis();
      }
    }

    public void consultarAtiende(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      consultarAtiende_call method_call = new consultarAtiende_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class consultarAtiende_call extends org.apache.thrift.async.TAsyncMethodCall {
      public consultarAtiende_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("consultarAtiende", org.apache.thrift.protocol.TMessageType.CALL, 0));
        consultarAtiende_args args = new consultarAtiende_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Atiende> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_consultarAtiende();
      }
    }

    public void consultarDoctores(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      consultarDoctores_call method_call = new consultarDoctores_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class consultarDoctores_call extends org.apache.thrift.async.TAsyncMethodCall {
      public consultarDoctores_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("consultarDoctores", org.apache.thrift.protocol.TMessageType.CALL, 0));
        consultarDoctores_args args = new consultarDoctores_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Doctor> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_consultarDoctores();
      }
    }

    public void consultarPacientes(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      consultarPacientes_call method_call = new consultarPacientes_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class consultarPacientes_call extends org.apache.thrift.async.TAsyncMethodCall {
      public consultarPacientes_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("consultarPacientes", org.apache.thrift.protocol.TMessageType.CALL, 0));
        consultarPacientes_args args = new consultarPacientes_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Paciente> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_consultarPacientes();
      }
    }

    public void consultarSeRealiza(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      consultarSeRealiza_call method_call = new consultarSeRealiza_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class consultarSeRealiza_call extends org.apache.thrift.async.TAsyncMethodCall {
      public consultarSeRealiza_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("consultarSeRealiza", org.apache.thrift.protocol.TMessageType.CALL, 0));
        consultarSeRealiza_args args = new consultarSeRealiza_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<SeRealiza> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_consultarSeRealiza();
      }
    }

    public void consultarAnalisisClave(String clave, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      consultarAnalisisClave_call method_call = new consultarAnalisisClave_call(clave, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class consultarAnalisisClave_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clave;
      public consultarAnalisisClave_call(String clave, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clave = clave;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("consultarAnalisisClave", org.apache.thrift.protocol.TMessageType.CALL, 0));
        consultarAnalisisClave_args args = new consultarAnalisisClave_args();
        args.setClave(clave);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public AnalisisClinico getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_consultarAnalisisClave();
      }
    }

    public void consultarPacienteClave(String clave, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      consultarPacienteClave_call method_call = new consultarPacienteClave_call(clave, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class consultarPacienteClave_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clave;
      public consultarPacienteClave_call(String clave, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clave = clave;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("consultarPacienteClave", org.apache.thrift.protocol.TMessageType.CALL, 0));
        consultarPacienteClave_args args = new consultarPacienteClave_args();
        args.setClave(clave);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Paciente getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_consultarPacienteClave();
      }
    }

    public void consultarDoctorClave(String clave, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      consultarDoctorClave_call method_call = new consultarDoctorClave_call(clave, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class consultarDoctorClave_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clave;
      public consultarDoctorClave_call(String clave, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clave = clave;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("consultarDoctorClave", org.apache.thrift.protocol.TMessageType.CALL, 0));
        consultarDoctorClave_args args = new consultarDoctorClave_args();
        args.setClave(clave);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Doctor getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_consultarDoctorClave();
      }
    }

    public void consultarAnalisisTipo(String tipo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      consultarAnalisisTipo_call method_call = new consultarAnalisisTipo_call(tipo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class consultarAnalisisTipo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String tipo;
      public consultarAnalisisTipo_call(String tipo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tipo = tipo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("consultarAnalisisTipo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        consultarAnalisisTipo_args args = new consultarAnalisisTipo_args();
        args.setTipo(tipo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<AnalisisClinico> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_consultarAnalisisTipo();
      }
    }

    public void consultarDoctoresEspecialidad(String especialidad, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      consultarDoctoresEspecialidad_call method_call = new consultarDoctoresEspecialidad_call(especialidad, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class consultarDoctoresEspecialidad_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String especialidad;
      public consultarDoctoresEspecialidad_call(String especialidad, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.especialidad = especialidad;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("consultarDoctoresEspecialidad", org.apache.thrift.protocol.TMessageType.CALL, 0));
        consultarDoctoresEspecialidad_args args = new consultarDoctoresEspecialidad_args();
        args.setEspecialidad(especialidad);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Doctor> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_consultarDoctoresEspecialidad();
      }
    }

    public void generarReporteAnalisisPaciente(String clavePaciente, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      generarReporteAnalisisPaciente_call method_call = new generarReporteAnalisisPaciente_call(clavePaciente, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class generarReporteAnalisisPaciente_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clavePaciente;
      public generarReporteAnalisisPaciente_call(String clavePaciente, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clavePaciente = clavePaciente;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("generarReporteAnalisisPaciente", org.apache.thrift.protocol.TMessageType.CALL, 0));
        generarReporteAnalisisPaciente_args args = new generarReporteAnalisisPaciente_args();
        args.setClavePaciente(clavePaciente);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ReporteAnalisisPaciente> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_generarReporteAnalisisPaciente();
      }
    }

    public void generarReportePacientesAnalisis(String claveAnalisis, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      generarReportePacientesAnalisis_call method_call = new generarReportePacientesAnalisis_call(claveAnalisis, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class generarReportePacientesAnalisis_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String claveAnalisis;
      public generarReportePacientesAnalisis_call(String claveAnalisis, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.claveAnalisis = claveAnalisis;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("generarReportePacientesAnalisis", org.apache.thrift.protocol.TMessageType.CALL, 0));
        generarReportePacientesAnalisis_args args = new generarReportePacientesAnalisis_args();
        args.setClaveAnalisis(claveAnalisis);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ReportePacientesAnalisis> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_generarReportePacientesAnalisis();
      }
    }

    public void generarReporteDoctoresPaciente(String clavePaciente, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      generarReporteDoctoresPaciente_call method_call = new generarReporteDoctoresPaciente_call(clavePaciente, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class generarReporteDoctoresPaciente_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clavePaciente;
      public generarReporteDoctoresPaciente_call(String clavePaciente, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clavePaciente = clavePaciente;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("generarReporteDoctoresPaciente", org.apache.thrift.protocol.TMessageType.CALL, 0));
        generarReporteDoctoresPaciente_args args = new generarReporteDoctoresPaciente_args();
        args.setClavePaciente(clavePaciente);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ReporteDoctoresPaciente> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_generarReporteDoctoresPaciente();
      }
    }

    public void generarReportePacientesDoctor(String claveDoctor, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      generarReportePacientesDoctor_call method_call = new generarReportePacientesDoctor_call(claveDoctor, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class generarReportePacientesDoctor_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String claveDoctor;
      public generarReportePacientesDoctor_call(String claveDoctor, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.claveDoctor = claveDoctor;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("generarReportePacientesDoctor", org.apache.thrift.protocol.TMessageType.CALL, 0));
        generarReportePacientesDoctor_args args = new generarReportePacientesDoctor_args();
        args.setClaveDoctor(claveDoctor);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ReportePacientesDoctor> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_generarReportePacientesDoctor();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("actualizarAnalisis", new actualizarAnalisis());
      processMap.put("actualizarDoctor", new actualizarDoctor());
      processMap.put("actualizarPaciente", new actualizarPaciente());
      processMap.put("borrarAnalisis", new borrarAnalisis());
      processMap.put("borrarDoctor", new borrarDoctor());
      processMap.put("borrarPaciente", new borrarPaciente());
      processMap.put("capturarAnalisis", new capturarAnalisis());
      processMap.put("capturarDoctor", new capturarDoctor());
      processMap.put("capturarPaciente", new capturarPaciente());
      processMap.put("capturarAtiende", new capturarAtiende());
      processMap.put("capturarSeRealiza", new capturarSeRealiza());
      processMap.put("consultarAnalisis", new consultarAnalisis());
      processMap.put("consultarAtiende", new consultarAtiende());
      processMap.put("consultarDoctores", new consultarDoctores());
      processMap.put("consultarPacientes", new consultarPacientes());
      processMap.put("consultarSeRealiza", new consultarSeRealiza());
      processMap.put("consultarAnalisisClave", new consultarAnalisisClave());
      processMap.put("consultarPacienteClave", new consultarPacienteClave());
      processMap.put("consultarDoctorClave", new consultarDoctorClave());
      processMap.put("consultarAnalisisTipo", new consultarAnalisisTipo());
      processMap.put("consultarDoctoresEspecialidad", new consultarDoctoresEspecialidad());
      processMap.put("generarReporteAnalisisPaciente", new generarReporteAnalisisPaciente());
      processMap.put("generarReportePacientesAnalisis", new generarReportePacientesAnalisis());
      processMap.put("generarReporteDoctoresPaciente", new generarReporteDoctoresPaciente());
      processMap.put("generarReportePacientesDoctor", new generarReportePacientesDoctor());
      return processMap;
    }

    public static class actualizarAnalisis<I extends Iface> extends org.apache.thrift.ProcessFunction<I, actualizarAnalisis_args> {
      public actualizarAnalisis() {
        super("actualizarAnalisis");
      }

      public actualizarAnalisis_args getEmptyArgsInstance() {
        return new actualizarAnalisis_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public actualizarAnalisis_result getResult(I iface, actualizarAnalisis_args args) throws org.apache.thrift.TException {
        actualizarAnalisis_result result = new actualizarAnalisis_result();
        result.success = iface.actualizarAnalisis(args.analisis);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class actualizarDoctor<I extends Iface> extends org.apache.thrift.ProcessFunction<I, actualizarDoctor_args> {
      public actualizarDoctor() {
        super("actualizarDoctor");
      }

      public actualizarDoctor_args getEmptyArgsInstance() {
        return new actualizarDoctor_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public actualizarDoctor_result getResult(I iface, actualizarDoctor_args args) throws org.apache.thrift.TException {
        actualizarDoctor_result result = new actualizarDoctor_result();
        result.success = iface.actualizarDoctor(args.doctor);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class actualizarPaciente<I extends Iface> extends org.apache.thrift.ProcessFunction<I, actualizarPaciente_args> {
      public actualizarPaciente() {
        super("actualizarPaciente");
      }

      public actualizarPaciente_args getEmptyArgsInstance() {
        return new actualizarPaciente_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public actualizarPaciente_result getResult(I iface, actualizarPaciente_args args) throws org.apache.thrift.TException {
        actualizarPaciente_result result = new actualizarPaciente_result();
        result.success = iface.actualizarPaciente(args.paciente);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class borrarAnalisis<I extends Iface> extends org.apache.thrift.ProcessFunction<I, borrarAnalisis_args> {
      public borrarAnalisis() {
        super("borrarAnalisis");
      }

      public borrarAnalisis_args getEmptyArgsInstance() {
        return new borrarAnalisis_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public borrarAnalisis_result getResult(I iface, borrarAnalisis_args args) throws org.apache.thrift.TException {
        borrarAnalisis_result result = new borrarAnalisis_result();
        result.success = iface.borrarAnalisis(args.claveAnalisis);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class borrarDoctor<I extends Iface> extends org.apache.thrift.ProcessFunction<I, borrarDoctor_args> {
      public borrarDoctor() {
        super("borrarDoctor");
      }

      public borrarDoctor_args getEmptyArgsInstance() {
        return new borrarDoctor_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public borrarDoctor_result getResult(I iface, borrarDoctor_args args) throws org.apache.thrift.TException {
        borrarDoctor_result result = new borrarDoctor_result();
        result.success = iface.borrarDoctor(args.claveDoctor);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class borrarPaciente<I extends Iface> extends org.apache.thrift.ProcessFunction<I, borrarPaciente_args> {
      public borrarPaciente() {
        super("borrarPaciente");
      }

      public borrarPaciente_args getEmptyArgsInstance() {
        return new borrarPaciente_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public borrarPaciente_result getResult(I iface, borrarPaciente_args args) throws org.apache.thrift.TException {
        borrarPaciente_result result = new borrarPaciente_result();
        result.success = iface.borrarPaciente(args.clavePaciente);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class capturarAnalisis<I extends Iface> extends org.apache.thrift.ProcessFunction<I, capturarAnalisis_args> {
      public capturarAnalisis() {
        super("capturarAnalisis");
      }

      public capturarAnalisis_args getEmptyArgsInstance() {
        return new capturarAnalisis_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public capturarAnalisis_result getResult(I iface, capturarAnalisis_args args) throws org.apache.thrift.TException {
        capturarAnalisis_result result = new capturarAnalisis_result();
        result.success = iface.capturarAnalisis(args.analisis);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class capturarDoctor<I extends Iface> extends org.apache.thrift.ProcessFunction<I, capturarDoctor_args> {
      public capturarDoctor() {
        super("capturarDoctor");
      }

      public capturarDoctor_args getEmptyArgsInstance() {
        return new capturarDoctor_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public capturarDoctor_result getResult(I iface, capturarDoctor_args args) throws org.apache.thrift.TException {
        capturarDoctor_result result = new capturarDoctor_result();
        result.success = iface.capturarDoctor(args.doctor);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class capturarPaciente<I extends Iface> extends org.apache.thrift.ProcessFunction<I, capturarPaciente_args> {
      public capturarPaciente() {
        super("capturarPaciente");
      }

      public capturarPaciente_args getEmptyArgsInstance() {
        return new capturarPaciente_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public capturarPaciente_result getResult(I iface, capturarPaciente_args args) throws org.apache.thrift.TException {
        capturarPaciente_result result = new capturarPaciente_result();
        result.success = iface.capturarPaciente(args.paciente);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class capturarAtiende<I extends Iface> extends org.apache.thrift.ProcessFunction<I, capturarAtiende_args> {
      public capturarAtiende() {
        super("capturarAtiende");
      }

      public capturarAtiende_args getEmptyArgsInstance() {
        return new capturarAtiende_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public capturarAtiende_result getResult(I iface, capturarAtiende_args args) throws org.apache.thrift.TException {
        capturarAtiende_result result = new capturarAtiende_result();
        result.success = iface.capturarAtiende(args.atiende);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class capturarSeRealiza<I extends Iface> extends org.apache.thrift.ProcessFunction<I, capturarSeRealiza_args> {
      public capturarSeRealiza() {
        super("capturarSeRealiza");
      }

      public capturarSeRealiza_args getEmptyArgsInstance() {
        return new capturarSeRealiza_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public capturarSeRealiza_result getResult(I iface, capturarSeRealiza_args args) throws org.apache.thrift.TException {
        capturarSeRealiza_result result = new capturarSeRealiza_result();
        result.success = iface.capturarSeRealiza(args.seRealiza);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class consultarAnalisis<I extends Iface> extends org.apache.thrift.ProcessFunction<I, consultarAnalisis_args> {
      public consultarAnalisis() {
        super("consultarAnalisis");
      }

      public consultarAnalisis_args getEmptyArgsInstance() {
        return new consultarAnalisis_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public consultarAnalisis_result getResult(I iface, consultarAnalisis_args args) throws org.apache.thrift.TException {
        consultarAnalisis_result result = new consultarAnalisis_result();
        result.success = iface.consultarAnalisis();
        return result;
      }
    }

    public static class consultarAtiende<I extends Iface> extends org.apache.thrift.ProcessFunction<I, consultarAtiende_args> {
      public consultarAtiende() {
        super("consultarAtiende");
      }

      public consultarAtiende_args getEmptyArgsInstance() {
        return new consultarAtiende_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public consultarAtiende_result getResult(I iface, consultarAtiende_args args) throws org.apache.thrift.TException {
        consultarAtiende_result result = new consultarAtiende_result();
        result.success = iface.consultarAtiende();
        return result;
      }
    }

    public static class consultarDoctores<I extends Iface> extends org.apache.thrift.ProcessFunction<I, consultarDoctores_args> {
      public consultarDoctores() {
        super("consultarDoctores");
      }

      public consultarDoctores_args getEmptyArgsInstance() {
        return new consultarDoctores_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public consultarDoctores_result getResult(I iface, consultarDoctores_args args) throws org.apache.thrift.TException {
        consultarDoctores_result result = new consultarDoctores_result();
        result.success = iface.consultarDoctores();
        return result;
      }
    }

    public static class consultarPacientes<I extends Iface> extends org.apache.thrift.ProcessFunction<I, consultarPacientes_args> {
      public consultarPacientes() {
        super("consultarPacientes");
      }

      public consultarPacientes_args getEmptyArgsInstance() {
        return new consultarPacientes_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public consultarPacientes_result getResult(I iface, consultarPacientes_args args) throws org.apache.thrift.TException {
        consultarPacientes_result result = new consultarPacientes_result();
        result.success = iface.consultarPacientes();
        return result;
      }
    }

    public static class consultarSeRealiza<I extends Iface> extends org.apache.thrift.ProcessFunction<I, consultarSeRealiza_args> {
      public consultarSeRealiza() {
        super("consultarSeRealiza");
      }

      public consultarSeRealiza_args getEmptyArgsInstance() {
        return new consultarSeRealiza_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public consultarSeRealiza_result getResult(I iface, consultarSeRealiza_args args) throws org.apache.thrift.TException {
        consultarSeRealiza_result result = new consultarSeRealiza_result();
        result.success = iface.consultarSeRealiza();
        return result;
      }
    }

    public static class consultarAnalisisClave<I extends Iface> extends org.apache.thrift.ProcessFunction<I, consultarAnalisisClave_args> {
      public consultarAnalisisClave() {
        super("consultarAnalisisClave");
      }

      public consultarAnalisisClave_args getEmptyArgsInstance() {
        return new consultarAnalisisClave_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public consultarAnalisisClave_result getResult(I iface, consultarAnalisisClave_args args) throws org.apache.thrift.TException {
        consultarAnalisisClave_result result = new consultarAnalisisClave_result();
        result.success = iface.consultarAnalisisClave(args.clave);
        return result;
      }
    }

    public static class consultarPacienteClave<I extends Iface> extends org.apache.thrift.ProcessFunction<I, consultarPacienteClave_args> {
      public consultarPacienteClave() {
        super("consultarPacienteClave");
      }

      public consultarPacienteClave_args getEmptyArgsInstance() {
        return new consultarPacienteClave_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public consultarPacienteClave_result getResult(I iface, consultarPacienteClave_args args) throws org.apache.thrift.TException {
        consultarPacienteClave_result result = new consultarPacienteClave_result();
        result.success = iface.consultarPacienteClave(args.clave);
        return result;
      }
    }

    public static class consultarDoctorClave<I extends Iface> extends org.apache.thrift.ProcessFunction<I, consultarDoctorClave_args> {
      public consultarDoctorClave() {
        super("consultarDoctorClave");
      }

      public consultarDoctorClave_args getEmptyArgsInstance() {
        return new consultarDoctorClave_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public consultarDoctorClave_result getResult(I iface, consultarDoctorClave_args args) throws org.apache.thrift.TException {
        consultarDoctorClave_result result = new consultarDoctorClave_result();
        result.success = iface.consultarDoctorClave(args.clave);
        return result;
      }
    }

    public static class consultarAnalisisTipo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, consultarAnalisisTipo_args> {
      public consultarAnalisisTipo() {
        super("consultarAnalisisTipo");
      }

      public consultarAnalisisTipo_args getEmptyArgsInstance() {
        return new consultarAnalisisTipo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public consultarAnalisisTipo_result getResult(I iface, consultarAnalisisTipo_args args) throws org.apache.thrift.TException {
        consultarAnalisisTipo_result result = new consultarAnalisisTipo_result();
        result.success = iface.consultarAnalisisTipo(args.tipo);
        return result;
      }
    }

    public static class consultarDoctoresEspecialidad<I extends Iface> extends org.apache.thrift.ProcessFunction<I, consultarDoctoresEspecialidad_args> {
      public consultarDoctoresEspecialidad() {
        super("consultarDoctoresEspecialidad");
      }

      public consultarDoctoresEspecialidad_args getEmptyArgsInstance() {
        return new consultarDoctoresEspecialidad_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public consultarDoctoresEspecialidad_result getResult(I iface, consultarDoctoresEspecialidad_args args) throws org.apache.thrift.TException {
        consultarDoctoresEspecialidad_result result = new consultarDoctoresEspecialidad_result();
        result.success = iface.consultarDoctoresEspecialidad(args.especialidad);
        return result;
      }
    }

    public static class generarReporteAnalisisPaciente<I extends Iface> extends org.apache.thrift.ProcessFunction<I, generarReporteAnalisisPaciente_args> {
      public generarReporteAnalisisPaciente() {
        super("generarReporteAnalisisPaciente");
      }

      public generarReporteAnalisisPaciente_args getEmptyArgsInstance() {
        return new generarReporteAnalisisPaciente_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public generarReporteAnalisisPaciente_result getResult(I iface, generarReporteAnalisisPaciente_args args) throws org.apache.thrift.TException {
        generarReporteAnalisisPaciente_result result = new generarReporteAnalisisPaciente_result();
        result.success = iface.generarReporteAnalisisPaciente(args.clavePaciente);
        return result;
      }
    }

    public static class generarReportePacientesAnalisis<I extends Iface> extends org.apache.thrift.ProcessFunction<I, generarReportePacientesAnalisis_args> {
      public generarReportePacientesAnalisis() {
        super("generarReportePacientesAnalisis");
      }

      public generarReportePacientesAnalisis_args getEmptyArgsInstance() {
        return new generarReportePacientesAnalisis_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public generarReportePacientesAnalisis_result getResult(I iface, generarReportePacientesAnalisis_args args) throws org.apache.thrift.TException {
        generarReportePacientesAnalisis_result result = new generarReportePacientesAnalisis_result();
        result.success = iface.generarReportePacientesAnalisis(args.claveAnalisis);
        return result;
      }
    }

    public static class generarReporteDoctoresPaciente<I extends Iface> extends org.apache.thrift.ProcessFunction<I, generarReporteDoctoresPaciente_args> {
      public generarReporteDoctoresPaciente() {
        super("generarReporteDoctoresPaciente");
      }

      public generarReporteDoctoresPaciente_args getEmptyArgsInstance() {
        return new generarReporteDoctoresPaciente_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public generarReporteDoctoresPaciente_result getResult(I iface, generarReporteDoctoresPaciente_args args) throws org.apache.thrift.TException {
        generarReporteDoctoresPaciente_result result = new generarReporteDoctoresPaciente_result();
        result.success = iface.generarReporteDoctoresPaciente(args.clavePaciente);
        return result;
      }
    }

    public static class generarReportePacientesDoctor<I extends Iface> extends org.apache.thrift.ProcessFunction<I, generarReportePacientesDoctor_args> {
      public generarReportePacientesDoctor() {
        super("generarReportePacientesDoctor");
      }

      public generarReportePacientesDoctor_args getEmptyArgsInstance() {
        return new generarReportePacientesDoctor_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public generarReportePacientesDoctor_result getResult(I iface, generarReportePacientesDoctor_args args) throws org.apache.thrift.TException {
        generarReportePacientesDoctor_result result = new generarReportePacientesDoctor_result();
        result.success = iface.generarReportePacientesDoctor(args.claveDoctor);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("actualizarAnalisis", new actualizarAnalisis());
      processMap.put("actualizarDoctor", new actualizarDoctor());
      processMap.put("actualizarPaciente", new actualizarPaciente());
      processMap.put("borrarAnalisis", new borrarAnalisis());
      processMap.put("borrarDoctor", new borrarDoctor());
      processMap.put("borrarPaciente", new borrarPaciente());
      processMap.put("capturarAnalisis", new capturarAnalisis());
      processMap.put("capturarDoctor", new capturarDoctor());
      processMap.put("capturarPaciente", new capturarPaciente());
      processMap.put("capturarAtiende", new capturarAtiende());
      processMap.put("capturarSeRealiza", new capturarSeRealiza());
      processMap.put("consultarAnalisis", new consultarAnalisis());
      processMap.put("consultarAtiende", new consultarAtiende());
      processMap.put("consultarDoctores", new consultarDoctores());
      processMap.put("consultarPacientes", new consultarPacientes());
      processMap.put("consultarSeRealiza", new consultarSeRealiza());
      processMap.put("consultarAnalisisClave", new consultarAnalisisClave());
      processMap.put("consultarPacienteClave", new consultarPacienteClave());
      processMap.put("consultarDoctorClave", new consultarDoctorClave());
      processMap.put("consultarAnalisisTipo", new consultarAnalisisTipo());
      processMap.put("consultarDoctoresEspecialidad", new consultarDoctoresEspecialidad());
      processMap.put("generarReporteAnalisisPaciente", new generarReporteAnalisisPaciente());
      processMap.put("generarReportePacientesAnalisis", new generarReportePacientesAnalisis());
      processMap.put("generarReporteDoctoresPaciente", new generarReporteDoctoresPaciente());
      processMap.put("generarReportePacientesDoctor", new generarReportePacientesDoctor());
      return processMap;
    }

    public static class actualizarAnalisis<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, actualizarAnalisis_args, Boolean> {
      public actualizarAnalisis() {
        super("actualizarAnalisis");
      }

      public actualizarAnalisis_args getEmptyArgsInstance() {
        return new actualizarAnalisis_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            actualizarAnalisis_result result = new actualizarAnalisis_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            actualizarAnalisis_result result = new actualizarAnalisis_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, actualizarAnalisis_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.actualizarAnalisis(args.analisis,resultHandler);
      }
    }

    public static class actualizarDoctor<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, actualizarDoctor_args, Boolean> {
      public actualizarDoctor() {
        super("actualizarDoctor");
      }

      public actualizarDoctor_args getEmptyArgsInstance() {
        return new actualizarDoctor_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            actualizarDoctor_result result = new actualizarDoctor_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            actualizarDoctor_result result = new actualizarDoctor_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, actualizarDoctor_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.actualizarDoctor(args.doctor,resultHandler);
      }
    }

    public static class actualizarPaciente<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, actualizarPaciente_args, Boolean> {
      public actualizarPaciente() {
        super("actualizarPaciente");
      }

      public actualizarPaciente_args getEmptyArgsInstance() {
        return new actualizarPaciente_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            actualizarPaciente_result result = new actualizarPaciente_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            actualizarPaciente_result result = new actualizarPaciente_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, actualizarPaciente_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.actualizarPaciente(args.paciente,resultHandler);
      }
    }

    public static class borrarAnalisis<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, borrarAnalisis_args, Boolean> {
      public borrarAnalisis() {
        super("borrarAnalisis");
      }

      public borrarAnalisis_args getEmptyArgsInstance() {
        return new borrarAnalisis_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            borrarAnalisis_result result = new borrarAnalisis_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            borrarAnalisis_result result = new borrarAnalisis_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, borrarAnalisis_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.borrarAnalisis(args.claveAnalisis,resultHandler);
      }
    }

    public static class borrarDoctor<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, borrarDoctor_args, Boolean> {
      public borrarDoctor() {
        super("borrarDoctor");
      }

      public borrarDoctor_args getEmptyArgsInstance() {
        return new borrarDoctor_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            borrarDoctor_result result = new borrarDoctor_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            borrarDoctor_result result = new borrarDoctor_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, borrarDoctor_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.borrarDoctor(args.claveDoctor,resultHandler);
      }
    }

    public static class borrarPaciente<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, borrarPaciente_args, Boolean> {
      public borrarPaciente() {
        super("borrarPaciente");
      }

      public borrarPaciente_args getEmptyArgsInstance() {
        return new borrarPaciente_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            borrarPaciente_result result = new borrarPaciente_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            borrarPaciente_result result = new borrarPaciente_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, borrarPaciente_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.borrarPaciente(args.clavePaciente,resultHandler);
      }
    }

    public static class capturarAnalisis<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, capturarAnalisis_args, Boolean> {
      public capturarAnalisis() {
        super("capturarAnalisis");
      }

      public capturarAnalisis_args getEmptyArgsInstance() {
        return new capturarAnalisis_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            capturarAnalisis_result result = new capturarAnalisis_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            capturarAnalisis_result result = new capturarAnalisis_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, capturarAnalisis_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.capturarAnalisis(args.analisis,resultHandler);
      }
    }

    public static class capturarDoctor<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, capturarDoctor_args, Boolean> {
      public capturarDoctor() {
        super("capturarDoctor");
      }

      public capturarDoctor_args getEmptyArgsInstance() {
        return new capturarDoctor_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            capturarDoctor_result result = new capturarDoctor_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            capturarDoctor_result result = new capturarDoctor_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, capturarDoctor_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.capturarDoctor(args.doctor,resultHandler);
      }
    }

    public static class capturarPaciente<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, capturarPaciente_args, Boolean> {
      public capturarPaciente() {
        super("capturarPaciente");
      }

      public capturarPaciente_args getEmptyArgsInstance() {
        return new capturarPaciente_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            capturarPaciente_result result = new capturarPaciente_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            capturarPaciente_result result = new capturarPaciente_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, capturarPaciente_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.capturarPaciente(args.paciente,resultHandler);
      }
    }

    public static class capturarAtiende<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, capturarAtiende_args, Boolean> {
      public capturarAtiende() {
        super("capturarAtiende");
      }

      public capturarAtiende_args getEmptyArgsInstance() {
        return new capturarAtiende_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            capturarAtiende_result result = new capturarAtiende_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            capturarAtiende_result result = new capturarAtiende_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, capturarAtiende_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.capturarAtiende(args.atiende,resultHandler);
      }
    }

    public static class capturarSeRealiza<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, capturarSeRealiza_args, Boolean> {
      public capturarSeRealiza() {
        super("capturarSeRealiza");
      }

      public capturarSeRealiza_args getEmptyArgsInstance() {
        return new capturarSeRealiza_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            capturarSeRealiza_result result = new capturarSeRealiza_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            capturarSeRealiza_result result = new capturarSeRealiza_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, capturarSeRealiza_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.capturarSeRealiza(args.seRealiza,resultHandler);
      }
    }

    public static class consultarAnalisis<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, consultarAnalisis_args, List<AnalisisClinico>> {
      public consultarAnalisis() {
        super("consultarAnalisis");
      }

      public consultarAnalisis_args getEmptyArgsInstance() {
        return new consultarAnalisis_args();
      }

      public AsyncMethodCallback<List<AnalisisClinico>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<AnalisisClinico>>() { 
          public void onComplete(List<AnalisisClinico> o) {
            consultarAnalisis_result result = new consultarAnalisis_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            consultarAnalisis_result result = new consultarAnalisis_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, consultarAnalisis_args args, org.apache.thrift.async.AsyncMethodCallback<List<AnalisisClinico>> resultHandler) throws TException {
        iface.consultarAnalisis(resultHandler);
      }
    }

    public static class consultarAtiende<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, consultarAtiende_args, List<Atiende>> {
      public consultarAtiende() {
        super("consultarAtiende");
      }

      public consultarAtiende_args getEmptyArgsInstance() {
        return new consultarAtiende_args();
      }

      public AsyncMethodCallback<List<Atiende>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Atiende>>() { 
          public void onComplete(List<Atiende> o) {
            consultarAtiende_result result = new consultarAtiende_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            consultarAtiende_result result = new consultarAtiende_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, consultarAtiende_args args, org.apache.thrift.async.AsyncMethodCallback<List<Atiende>> resultHandler) throws TException {
        iface.consultarAtiende(resultHandler);
      }
    }

    public static class consultarDoctores<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, consultarDoctores_args, List<Doctor>> {
      public consultarDoctores() {
        super("consultarDoctores");
      }

      public consultarDoctores_args getEmptyArgsInstance() {
        return new consultarDoctores_args();
      }

      public AsyncMethodCallback<List<Doctor>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Doctor>>() { 
          public void onComplete(List<Doctor> o) {
            consultarDoctores_result result = new consultarDoctores_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            consultarDoctores_result result = new consultarDoctores_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, consultarDoctores_args args, org.apache.thrift.async.AsyncMethodCallback<List<Doctor>> resultHandler) throws TException {
        iface.consultarDoctores(resultHandler);
      }
    }

    public static class consultarPacientes<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, consultarPacientes_args, List<Paciente>> {
      public consultarPacientes() {
        super("consultarPacientes");
      }

      public consultarPacientes_args getEmptyArgsInstance() {
        return new consultarPacientes_args();
      }

      public AsyncMethodCallback<List<Paciente>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Paciente>>() { 
          public void onComplete(List<Paciente> o) {
            consultarPacientes_result result = new consultarPacientes_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            consultarPacientes_result result = new consultarPacientes_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, consultarPacientes_args args, org.apache.thrift.async.AsyncMethodCallback<List<Paciente>> resultHandler) throws TException {
        iface.consultarPacientes(resultHandler);
      }
    }

    public static class consultarSeRealiza<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, consultarSeRealiza_args, List<SeRealiza>> {
      public consultarSeRealiza() {
        super("consultarSeRealiza");
      }

      public consultarSeRealiza_args getEmptyArgsInstance() {
        return new consultarSeRealiza_args();
      }

      public AsyncMethodCallback<List<SeRealiza>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<SeRealiza>>() { 
          public void onComplete(List<SeRealiza> o) {
            consultarSeRealiza_result result = new consultarSeRealiza_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            consultarSeRealiza_result result = new consultarSeRealiza_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, consultarSeRealiza_args args, org.apache.thrift.async.AsyncMethodCallback<List<SeRealiza>> resultHandler) throws TException {
        iface.consultarSeRealiza(resultHandler);
      }
    }

    public static class consultarAnalisisClave<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, consultarAnalisisClave_args, AnalisisClinico> {
      public consultarAnalisisClave() {
        super("consultarAnalisisClave");
      }

      public consultarAnalisisClave_args getEmptyArgsInstance() {
        return new consultarAnalisisClave_args();
      }

      public AsyncMethodCallback<AnalisisClinico> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<AnalisisClinico>() { 
          public void onComplete(AnalisisClinico o) {
            consultarAnalisisClave_result result = new consultarAnalisisClave_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            consultarAnalisisClave_result result = new consultarAnalisisClave_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, consultarAnalisisClave_args args, org.apache.thrift.async.AsyncMethodCallback<AnalisisClinico> resultHandler) throws TException {
        iface.consultarAnalisisClave(args.clave,resultHandler);
      }
    }

    public static class consultarPacienteClave<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, consultarPacienteClave_args, Paciente> {
      public consultarPacienteClave() {
        super("consultarPacienteClave");
      }

      public consultarPacienteClave_args getEmptyArgsInstance() {
        return new consultarPacienteClave_args();
      }

      public AsyncMethodCallback<Paciente> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Paciente>() { 
          public void onComplete(Paciente o) {
            consultarPacienteClave_result result = new consultarPacienteClave_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            consultarPacienteClave_result result = new consultarPacienteClave_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, consultarPacienteClave_args args, org.apache.thrift.async.AsyncMethodCallback<Paciente> resultHandler) throws TException {
        iface.consultarPacienteClave(args.clave,resultHandler);
      }
    }

    public static class consultarDoctorClave<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, consultarDoctorClave_args, Doctor> {
      public consultarDoctorClave() {
        super("consultarDoctorClave");
      }

      public consultarDoctorClave_args getEmptyArgsInstance() {
        return new consultarDoctorClave_args();
      }

      public AsyncMethodCallback<Doctor> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Doctor>() { 
          public void onComplete(Doctor o) {
            consultarDoctorClave_result result = new consultarDoctorClave_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            consultarDoctorClave_result result = new consultarDoctorClave_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, consultarDoctorClave_args args, org.apache.thrift.async.AsyncMethodCallback<Doctor> resultHandler) throws TException {
        iface.consultarDoctorClave(args.clave,resultHandler);
      }
    }

    public static class consultarAnalisisTipo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, consultarAnalisisTipo_args, List<AnalisisClinico>> {
      public consultarAnalisisTipo() {
        super("consultarAnalisisTipo");
      }

      public consultarAnalisisTipo_args getEmptyArgsInstance() {
        return new consultarAnalisisTipo_args();
      }

      public AsyncMethodCallback<List<AnalisisClinico>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<AnalisisClinico>>() { 
          public void onComplete(List<AnalisisClinico> o) {
            consultarAnalisisTipo_result result = new consultarAnalisisTipo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            consultarAnalisisTipo_result result = new consultarAnalisisTipo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, consultarAnalisisTipo_args args, org.apache.thrift.async.AsyncMethodCallback<List<AnalisisClinico>> resultHandler) throws TException {
        iface.consultarAnalisisTipo(args.tipo,resultHandler);
      }
    }

    public static class consultarDoctoresEspecialidad<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, consultarDoctoresEspecialidad_args, List<Doctor>> {
      public consultarDoctoresEspecialidad() {
        super("consultarDoctoresEspecialidad");
      }

      public consultarDoctoresEspecialidad_args getEmptyArgsInstance() {
        return new consultarDoctoresEspecialidad_args();
      }

      public AsyncMethodCallback<List<Doctor>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Doctor>>() { 
          public void onComplete(List<Doctor> o) {
            consultarDoctoresEspecialidad_result result = new consultarDoctoresEspecialidad_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            consultarDoctoresEspecialidad_result result = new consultarDoctoresEspecialidad_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, consultarDoctoresEspecialidad_args args, org.apache.thrift.async.AsyncMethodCallback<List<Doctor>> resultHandler) throws TException {
        iface.consultarDoctoresEspecialidad(args.especialidad,resultHandler);
      }
    }

    public static class generarReporteAnalisisPaciente<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, generarReporteAnalisisPaciente_args, List<ReporteAnalisisPaciente>> {
      public generarReporteAnalisisPaciente() {
        super("generarReporteAnalisisPaciente");
      }

      public generarReporteAnalisisPaciente_args getEmptyArgsInstance() {
        return new generarReporteAnalisisPaciente_args();
      }

      public AsyncMethodCallback<List<ReporteAnalisisPaciente>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<ReporteAnalisisPaciente>>() { 
          public void onComplete(List<ReporteAnalisisPaciente> o) {
            generarReporteAnalisisPaciente_result result = new generarReporteAnalisisPaciente_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            generarReporteAnalisisPaciente_result result = new generarReporteAnalisisPaciente_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, generarReporteAnalisisPaciente_args args, org.apache.thrift.async.AsyncMethodCallback<List<ReporteAnalisisPaciente>> resultHandler) throws TException {
        iface.generarReporteAnalisisPaciente(args.clavePaciente,resultHandler);
      }
    }

    public static class generarReportePacientesAnalisis<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, generarReportePacientesAnalisis_args, List<ReportePacientesAnalisis>> {
      public generarReportePacientesAnalisis() {
        super("generarReportePacientesAnalisis");
      }

      public generarReportePacientesAnalisis_args getEmptyArgsInstance() {
        return new generarReportePacientesAnalisis_args();
      }

      public AsyncMethodCallback<List<ReportePacientesAnalisis>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<ReportePacientesAnalisis>>() { 
          public void onComplete(List<ReportePacientesAnalisis> o) {
            generarReportePacientesAnalisis_result result = new generarReportePacientesAnalisis_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            generarReportePacientesAnalisis_result result = new generarReportePacientesAnalisis_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, generarReportePacientesAnalisis_args args, org.apache.thrift.async.AsyncMethodCallback<List<ReportePacientesAnalisis>> resultHandler) throws TException {
        iface.generarReportePacientesAnalisis(args.claveAnalisis,resultHandler);
      }
    }

    public static class generarReporteDoctoresPaciente<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, generarReporteDoctoresPaciente_args, List<ReporteDoctoresPaciente>> {
      public generarReporteDoctoresPaciente() {
        super("generarReporteDoctoresPaciente");
      }

      public generarReporteDoctoresPaciente_args getEmptyArgsInstance() {
        return new generarReporteDoctoresPaciente_args();
      }

      public AsyncMethodCallback<List<ReporteDoctoresPaciente>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<ReporteDoctoresPaciente>>() { 
          public void onComplete(List<ReporteDoctoresPaciente> o) {
            generarReporteDoctoresPaciente_result result = new generarReporteDoctoresPaciente_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            generarReporteDoctoresPaciente_result result = new generarReporteDoctoresPaciente_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, generarReporteDoctoresPaciente_args args, org.apache.thrift.async.AsyncMethodCallback<List<ReporteDoctoresPaciente>> resultHandler) throws TException {
        iface.generarReporteDoctoresPaciente(args.clavePaciente,resultHandler);
      }
    }

    public static class generarReportePacientesDoctor<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, generarReportePacientesDoctor_args, List<ReportePacientesDoctor>> {
      public generarReportePacientesDoctor() {
        super("generarReportePacientesDoctor");
      }

      public generarReportePacientesDoctor_args getEmptyArgsInstance() {
        return new generarReportePacientesDoctor_args();
      }

      public AsyncMethodCallback<List<ReportePacientesDoctor>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<ReportePacientesDoctor>>() { 
          public void onComplete(List<ReportePacientesDoctor> o) {
            generarReportePacientesDoctor_result result = new generarReportePacientesDoctor_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            generarReportePacientesDoctor_result result = new generarReportePacientesDoctor_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, generarReportePacientesDoctor_args args, org.apache.thrift.async.AsyncMethodCallback<List<ReportePacientesDoctor>> resultHandler) throws TException {
        iface.generarReportePacientesDoctor(args.claveDoctor,resultHandler);
      }
    }

  }

  public static class actualizarAnalisis_args implements org.apache.thrift.TBase<actualizarAnalisis_args, actualizarAnalisis_args._Fields>, java.io.Serializable, Cloneable, Comparable<actualizarAnalisis_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("actualizarAnalisis_args");

    private static final org.apache.thrift.protocol.TField ANALISIS_FIELD_DESC = new org.apache.thrift.protocol.TField("analisis", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new actualizarAnalisis_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new actualizarAnalisis_argsTupleSchemeFactory());
    }

    public AnalisisClinico analisis; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ANALISIS((short)1, "analisis");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ANALISIS
            return ANALISIS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ANALISIS, new org.apache.thrift.meta_data.FieldMetaData("analisis", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AnalisisClinico.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(actualizarAnalisis_args.class, metaDataMap);
    }

    public actualizarAnalisis_args() {
    }

    public actualizarAnalisis_args(
      AnalisisClinico analisis)
    {
      this();
      this.analisis = analisis;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public actualizarAnalisis_args(actualizarAnalisis_args other) {
      if (other.isSetAnalisis()) {
        this.analisis = new AnalisisClinico(other.analisis);
      }
    }

    public actualizarAnalisis_args deepCopy() {
      return new actualizarAnalisis_args(this);
    }

    @Override
    public void clear() {
      this.analisis = null;
    }

    public AnalisisClinico getAnalisis() {
      return this.analisis;
    }

    public actualizarAnalisis_args setAnalisis(AnalisisClinico analisis) {
      this.analisis = analisis;
      return this;
    }

    public void unsetAnalisis() {
      this.analisis = null;
    }

    /** Returns true if field analisis is set (has been assigned a value) and false otherwise */
    public boolean isSetAnalisis() {
      return this.analisis != null;
    }

    public void setAnalisisIsSet(boolean value) {
      if (!value) {
        this.analisis = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ANALISIS:
        if (value == null) {
          unsetAnalisis();
        } else {
          setAnalisis((AnalisisClinico)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ANALISIS:
        return getAnalisis();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ANALISIS:
        return isSetAnalisis();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof actualizarAnalisis_args)
        return this.equals((actualizarAnalisis_args)that);
      return false;
    }

    public boolean equals(actualizarAnalisis_args that) {
      if (that == null)
        return false;

      boolean this_present_analisis = true && this.isSetAnalisis();
      boolean that_present_analisis = true && that.isSetAnalisis();
      if (this_present_analisis || that_present_analisis) {
        if (!(this_present_analisis && that_present_analisis))
          return false;
        if (!this.analisis.equals(that.analisis))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(actualizarAnalisis_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAnalisis()).compareTo(other.isSetAnalisis());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAnalisis()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.analisis, other.analisis);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("actualizarAnalisis_args(");
      boolean first = true;

      sb.append("analisis:");
      if (this.analisis == null) {
        sb.append("null");
      } else {
        sb.append(this.analisis);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (analisis != null) {
        analisis.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class actualizarAnalisis_argsStandardSchemeFactory implements SchemeFactory {
      public actualizarAnalisis_argsStandardScheme getScheme() {
        return new actualizarAnalisis_argsStandardScheme();
      }
    }

    private static class actualizarAnalisis_argsStandardScheme extends StandardScheme<actualizarAnalisis_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, actualizarAnalisis_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ANALISIS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.analisis = new AnalisisClinico();
                struct.analisis.read(iprot);
                struct.setAnalisisIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, actualizarAnalisis_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.analisis != null) {
          oprot.writeFieldBegin(ANALISIS_FIELD_DESC);
          struct.analisis.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class actualizarAnalisis_argsTupleSchemeFactory implements SchemeFactory {
      public actualizarAnalisis_argsTupleScheme getScheme() {
        return new actualizarAnalisis_argsTupleScheme();
      }
    }

    private static class actualizarAnalisis_argsTupleScheme extends TupleScheme<actualizarAnalisis_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, actualizarAnalisis_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAnalisis()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAnalisis()) {
          struct.analisis.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, actualizarAnalisis_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.analisis = new AnalisisClinico();
          struct.analisis.read(iprot);
          struct.setAnalisisIsSet(true);
        }
      }
    }

  }

  public static class actualizarAnalisis_result implements org.apache.thrift.TBase<actualizarAnalisis_result, actualizarAnalisis_result._Fields>, java.io.Serializable, Cloneable, Comparable<actualizarAnalisis_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("actualizarAnalisis_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new actualizarAnalisis_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new actualizarAnalisis_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(actualizarAnalisis_result.class, metaDataMap);
    }

    public actualizarAnalisis_result() {
    }

    public actualizarAnalisis_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public actualizarAnalisis_result(actualizarAnalisis_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public actualizarAnalisis_result deepCopy() {
      return new actualizarAnalisis_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public actualizarAnalisis_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof actualizarAnalisis_result)
        return this.equals((actualizarAnalisis_result)that);
      return false;
    }

    public boolean equals(actualizarAnalisis_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(actualizarAnalisis_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("actualizarAnalisis_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class actualizarAnalisis_resultStandardSchemeFactory implements SchemeFactory {
      public actualizarAnalisis_resultStandardScheme getScheme() {
        return new actualizarAnalisis_resultStandardScheme();
      }
    }

    private static class actualizarAnalisis_resultStandardScheme extends StandardScheme<actualizarAnalisis_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, actualizarAnalisis_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, actualizarAnalisis_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class actualizarAnalisis_resultTupleSchemeFactory implements SchemeFactory {
      public actualizarAnalisis_resultTupleScheme getScheme() {
        return new actualizarAnalisis_resultTupleScheme();
      }
    }

    private static class actualizarAnalisis_resultTupleScheme extends TupleScheme<actualizarAnalisis_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, actualizarAnalisis_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, actualizarAnalisis_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class actualizarDoctor_args implements org.apache.thrift.TBase<actualizarDoctor_args, actualizarDoctor_args._Fields>, java.io.Serializable, Cloneable, Comparable<actualizarDoctor_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("actualizarDoctor_args");

    private static final org.apache.thrift.protocol.TField DOCTOR_FIELD_DESC = new org.apache.thrift.protocol.TField("doctor", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new actualizarDoctor_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new actualizarDoctor_argsTupleSchemeFactory());
    }

    public Doctor doctor; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DOCTOR((short)1, "doctor");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DOCTOR
            return DOCTOR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DOCTOR, new org.apache.thrift.meta_data.FieldMetaData("doctor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Doctor.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(actualizarDoctor_args.class, metaDataMap);
    }

    public actualizarDoctor_args() {
    }

    public actualizarDoctor_args(
      Doctor doctor)
    {
      this();
      this.doctor = doctor;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public actualizarDoctor_args(actualizarDoctor_args other) {
      if (other.isSetDoctor()) {
        this.doctor = new Doctor(other.doctor);
      }
    }

    public actualizarDoctor_args deepCopy() {
      return new actualizarDoctor_args(this);
    }

    @Override
    public void clear() {
      this.doctor = null;
    }

    public Doctor getDoctor() {
      return this.doctor;
    }

    public actualizarDoctor_args setDoctor(Doctor doctor) {
      this.doctor = doctor;
      return this;
    }

    public void unsetDoctor() {
      this.doctor = null;
    }

    /** Returns true if field doctor is set (has been assigned a value) and false otherwise */
    public boolean isSetDoctor() {
      return this.doctor != null;
    }

    public void setDoctorIsSet(boolean value) {
      if (!value) {
        this.doctor = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DOCTOR:
        if (value == null) {
          unsetDoctor();
        } else {
          setDoctor((Doctor)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DOCTOR:
        return getDoctor();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DOCTOR:
        return isSetDoctor();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof actualizarDoctor_args)
        return this.equals((actualizarDoctor_args)that);
      return false;
    }

    public boolean equals(actualizarDoctor_args that) {
      if (that == null)
        return false;

      boolean this_present_doctor = true && this.isSetDoctor();
      boolean that_present_doctor = true && that.isSetDoctor();
      if (this_present_doctor || that_present_doctor) {
        if (!(this_present_doctor && that_present_doctor))
          return false;
        if (!this.doctor.equals(that.doctor))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(actualizarDoctor_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDoctor()).compareTo(other.isSetDoctor());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDoctor()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.doctor, other.doctor);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("actualizarDoctor_args(");
      boolean first = true;

      sb.append("doctor:");
      if (this.doctor == null) {
        sb.append("null");
      } else {
        sb.append(this.doctor);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (doctor != null) {
        doctor.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class actualizarDoctor_argsStandardSchemeFactory implements SchemeFactory {
      public actualizarDoctor_argsStandardScheme getScheme() {
        return new actualizarDoctor_argsStandardScheme();
      }
    }

    private static class actualizarDoctor_argsStandardScheme extends StandardScheme<actualizarDoctor_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, actualizarDoctor_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DOCTOR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.doctor = new Doctor();
                struct.doctor.read(iprot);
                struct.setDoctorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, actualizarDoctor_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.doctor != null) {
          oprot.writeFieldBegin(DOCTOR_FIELD_DESC);
          struct.doctor.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class actualizarDoctor_argsTupleSchemeFactory implements SchemeFactory {
      public actualizarDoctor_argsTupleScheme getScheme() {
        return new actualizarDoctor_argsTupleScheme();
      }
    }

    private static class actualizarDoctor_argsTupleScheme extends TupleScheme<actualizarDoctor_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, actualizarDoctor_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDoctor()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDoctor()) {
          struct.doctor.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, actualizarDoctor_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.doctor = new Doctor();
          struct.doctor.read(iprot);
          struct.setDoctorIsSet(true);
        }
      }
    }

  }

  public static class actualizarDoctor_result implements org.apache.thrift.TBase<actualizarDoctor_result, actualizarDoctor_result._Fields>, java.io.Serializable, Cloneable, Comparable<actualizarDoctor_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("actualizarDoctor_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new actualizarDoctor_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new actualizarDoctor_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(actualizarDoctor_result.class, metaDataMap);
    }

    public actualizarDoctor_result() {
    }

    public actualizarDoctor_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public actualizarDoctor_result(actualizarDoctor_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public actualizarDoctor_result deepCopy() {
      return new actualizarDoctor_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public actualizarDoctor_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof actualizarDoctor_result)
        return this.equals((actualizarDoctor_result)that);
      return false;
    }

    public boolean equals(actualizarDoctor_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(actualizarDoctor_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("actualizarDoctor_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class actualizarDoctor_resultStandardSchemeFactory implements SchemeFactory {
      public actualizarDoctor_resultStandardScheme getScheme() {
        return new actualizarDoctor_resultStandardScheme();
      }
    }

    private static class actualizarDoctor_resultStandardScheme extends StandardScheme<actualizarDoctor_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, actualizarDoctor_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, actualizarDoctor_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class actualizarDoctor_resultTupleSchemeFactory implements SchemeFactory {
      public actualizarDoctor_resultTupleScheme getScheme() {
        return new actualizarDoctor_resultTupleScheme();
      }
    }

    private static class actualizarDoctor_resultTupleScheme extends TupleScheme<actualizarDoctor_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, actualizarDoctor_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, actualizarDoctor_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class actualizarPaciente_args implements org.apache.thrift.TBase<actualizarPaciente_args, actualizarPaciente_args._Fields>, java.io.Serializable, Cloneable, Comparable<actualizarPaciente_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("actualizarPaciente_args");

    private static final org.apache.thrift.protocol.TField PACIENTE_FIELD_DESC = new org.apache.thrift.protocol.TField("paciente", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new actualizarPaciente_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new actualizarPaciente_argsTupleSchemeFactory());
    }

    public Paciente paciente; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PACIENTE((short)1, "paciente");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PACIENTE
            return PACIENTE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PACIENTE, new org.apache.thrift.meta_data.FieldMetaData("paciente", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Paciente.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(actualizarPaciente_args.class, metaDataMap);
    }

    public actualizarPaciente_args() {
    }

    public actualizarPaciente_args(
      Paciente paciente)
    {
      this();
      this.paciente = paciente;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public actualizarPaciente_args(actualizarPaciente_args other) {
      if (other.isSetPaciente()) {
        this.paciente = new Paciente(other.paciente);
      }
    }

    public actualizarPaciente_args deepCopy() {
      return new actualizarPaciente_args(this);
    }

    @Override
    public void clear() {
      this.paciente = null;
    }

    public Paciente getPaciente() {
      return this.paciente;
    }

    public actualizarPaciente_args setPaciente(Paciente paciente) {
      this.paciente = paciente;
      return this;
    }

    public void unsetPaciente() {
      this.paciente = null;
    }

    /** Returns true if field paciente is set (has been assigned a value) and false otherwise */
    public boolean isSetPaciente() {
      return this.paciente != null;
    }

    public void setPacienteIsSet(boolean value) {
      if (!value) {
        this.paciente = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PACIENTE:
        if (value == null) {
          unsetPaciente();
        } else {
          setPaciente((Paciente)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PACIENTE:
        return getPaciente();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PACIENTE:
        return isSetPaciente();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof actualizarPaciente_args)
        return this.equals((actualizarPaciente_args)that);
      return false;
    }

    public boolean equals(actualizarPaciente_args that) {
      if (that == null)
        return false;

      boolean this_present_paciente = true && this.isSetPaciente();
      boolean that_present_paciente = true && that.isSetPaciente();
      if (this_present_paciente || that_present_paciente) {
        if (!(this_present_paciente && that_present_paciente))
          return false;
        if (!this.paciente.equals(that.paciente))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(actualizarPaciente_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPaciente()).compareTo(other.isSetPaciente());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPaciente()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paciente, other.paciente);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("actualizarPaciente_args(");
      boolean first = true;

      sb.append("paciente:");
      if (this.paciente == null) {
        sb.append("null");
      } else {
        sb.append(this.paciente);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (paciente != null) {
        paciente.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class actualizarPaciente_argsStandardSchemeFactory implements SchemeFactory {
      public actualizarPaciente_argsStandardScheme getScheme() {
        return new actualizarPaciente_argsStandardScheme();
      }
    }

    private static class actualizarPaciente_argsStandardScheme extends StandardScheme<actualizarPaciente_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, actualizarPaciente_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PACIENTE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.paciente = new Paciente();
                struct.paciente.read(iprot);
                struct.setPacienteIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, actualizarPaciente_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.paciente != null) {
          oprot.writeFieldBegin(PACIENTE_FIELD_DESC);
          struct.paciente.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class actualizarPaciente_argsTupleSchemeFactory implements SchemeFactory {
      public actualizarPaciente_argsTupleScheme getScheme() {
        return new actualizarPaciente_argsTupleScheme();
      }
    }

    private static class actualizarPaciente_argsTupleScheme extends TupleScheme<actualizarPaciente_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, actualizarPaciente_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPaciente()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPaciente()) {
          struct.paciente.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, actualizarPaciente_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.paciente = new Paciente();
          struct.paciente.read(iprot);
          struct.setPacienteIsSet(true);
        }
      }
    }

  }

  public static class actualizarPaciente_result implements org.apache.thrift.TBase<actualizarPaciente_result, actualizarPaciente_result._Fields>, java.io.Serializable, Cloneable, Comparable<actualizarPaciente_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("actualizarPaciente_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new actualizarPaciente_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new actualizarPaciente_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(actualizarPaciente_result.class, metaDataMap);
    }

    public actualizarPaciente_result() {
    }

    public actualizarPaciente_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public actualizarPaciente_result(actualizarPaciente_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public actualizarPaciente_result deepCopy() {
      return new actualizarPaciente_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public actualizarPaciente_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof actualizarPaciente_result)
        return this.equals((actualizarPaciente_result)that);
      return false;
    }

    public boolean equals(actualizarPaciente_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(actualizarPaciente_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("actualizarPaciente_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class actualizarPaciente_resultStandardSchemeFactory implements SchemeFactory {
      public actualizarPaciente_resultStandardScheme getScheme() {
        return new actualizarPaciente_resultStandardScheme();
      }
    }

    private static class actualizarPaciente_resultStandardScheme extends StandardScheme<actualizarPaciente_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, actualizarPaciente_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, actualizarPaciente_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class actualizarPaciente_resultTupleSchemeFactory implements SchemeFactory {
      public actualizarPaciente_resultTupleScheme getScheme() {
        return new actualizarPaciente_resultTupleScheme();
      }
    }

    private static class actualizarPaciente_resultTupleScheme extends TupleScheme<actualizarPaciente_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, actualizarPaciente_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, actualizarPaciente_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class borrarAnalisis_args implements org.apache.thrift.TBase<borrarAnalisis_args, borrarAnalisis_args._Fields>, java.io.Serializable, Cloneable, Comparable<borrarAnalisis_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("borrarAnalisis_args");

    private static final org.apache.thrift.protocol.TField CLAVE_ANALISIS_FIELD_DESC = new org.apache.thrift.protocol.TField("claveAnalisis", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new borrarAnalisis_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new borrarAnalisis_argsTupleSchemeFactory());
    }

    public String claveAnalisis; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLAVE_ANALISIS((short)1, "claveAnalisis");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLAVE_ANALISIS
            return CLAVE_ANALISIS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLAVE_ANALISIS, new org.apache.thrift.meta_data.FieldMetaData("claveAnalisis", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(borrarAnalisis_args.class, metaDataMap);
    }

    public borrarAnalisis_args() {
    }

    public borrarAnalisis_args(
      String claveAnalisis)
    {
      this();
      this.claveAnalisis = claveAnalisis;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public borrarAnalisis_args(borrarAnalisis_args other) {
      if (other.isSetClaveAnalisis()) {
        this.claveAnalisis = other.claveAnalisis;
      }
    }

    public borrarAnalisis_args deepCopy() {
      return new borrarAnalisis_args(this);
    }

    @Override
    public void clear() {
      this.claveAnalisis = null;
    }

    public String getClaveAnalisis() {
      return this.claveAnalisis;
    }

    public borrarAnalisis_args setClaveAnalisis(String claveAnalisis) {
      this.claveAnalisis = claveAnalisis;
      return this;
    }

    public void unsetClaveAnalisis() {
      this.claveAnalisis = null;
    }

    /** Returns true if field claveAnalisis is set (has been assigned a value) and false otherwise */
    public boolean isSetClaveAnalisis() {
      return this.claveAnalisis != null;
    }

    public void setClaveAnalisisIsSet(boolean value) {
      if (!value) {
        this.claveAnalisis = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLAVE_ANALISIS:
        if (value == null) {
          unsetClaveAnalisis();
        } else {
          setClaveAnalisis((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLAVE_ANALISIS:
        return getClaveAnalisis();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLAVE_ANALISIS:
        return isSetClaveAnalisis();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof borrarAnalisis_args)
        return this.equals((borrarAnalisis_args)that);
      return false;
    }

    public boolean equals(borrarAnalisis_args that) {
      if (that == null)
        return false;

      boolean this_present_claveAnalisis = true && this.isSetClaveAnalisis();
      boolean that_present_claveAnalisis = true && that.isSetClaveAnalisis();
      if (this_present_claveAnalisis || that_present_claveAnalisis) {
        if (!(this_present_claveAnalisis && that_present_claveAnalisis))
          return false;
        if (!this.claveAnalisis.equals(that.claveAnalisis))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(borrarAnalisis_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClaveAnalisis()).compareTo(other.isSetClaveAnalisis());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClaveAnalisis()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.claveAnalisis, other.claveAnalisis);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("borrarAnalisis_args(");
      boolean first = true;

      sb.append("claveAnalisis:");
      if (this.claveAnalisis == null) {
        sb.append("null");
      } else {
        sb.append(this.claveAnalisis);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class borrarAnalisis_argsStandardSchemeFactory implements SchemeFactory {
      public borrarAnalisis_argsStandardScheme getScheme() {
        return new borrarAnalisis_argsStandardScheme();
      }
    }

    private static class borrarAnalisis_argsStandardScheme extends StandardScheme<borrarAnalisis_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, borrarAnalisis_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLAVE_ANALISIS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.claveAnalisis = iprot.readString();
                struct.setClaveAnalisisIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, borrarAnalisis_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.claveAnalisis != null) {
          oprot.writeFieldBegin(CLAVE_ANALISIS_FIELD_DESC);
          oprot.writeString(struct.claveAnalisis);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class borrarAnalisis_argsTupleSchemeFactory implements SchemeFactory {
      public borrarAnalisis_argsTupleScheme getScheme() {
        return new borrarAnalisis_argsTupleScheme();
      }
    }

    private static class borrarAnalisis_argsTupleScheme extends TupleScheme<borrarAnalisis_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, borrarAnalisis_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClaveAnalisis()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetClaveAnalisis()) {
          oprot.writeString(struct.claveAnalisis);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, borrarAnalisis_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.claveAnalisis = iprot.readString();
          struct.setClaveAnalisisIsSet(true);
        }
      }
    }

  }

  public static class borrarAnalisis_result implements org.apache.thrift.TBase<borrarAnalisis_result, borrarAnalisis_result._Fields>, java.io.Serializable, Cloneable, Comparable<borrarAnalisis_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("borrarAnalisis_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new borrarAnalisis_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new borrarAnalisis_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(borrarAnalisis_result.class, metaDataMap);
    }

    public borrarAnalisis_result() {
    }

    public borrarAnalisis_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public borrarAnalisis_result(borrarAnalisis_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public borrarAnalisis_result deepCopy() {
      return new borrarAnalisis_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public borrarAnalisis_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof borrarAnalisis_result)
        return this.equals((borrarAnalisis_result)that);
      return false;
    }

    public boolean equals(borrarAnalisis_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(borrarAnalisis_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("borrarAnalisis_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class borrarAnalisis_resultStandardSchemeFactory implements SchemeFactory {
      public borrarAnalisis_resultStandardScheme getScheme() {
        return new borrarAnalisis_resultStandardScheme();
      }
    }

    private static class borrarAnalisis_resultStandardScheme extends StandardScheme<borrarAnalisis_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, borrarAnalisis_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, borrarAnalisis_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class borrarAnalisis_resultTupleSchemeFactory implements SchemeFactory {
      public borrarAnalisis_resultTupleScheme getScheme() {
        return new borrarAnalisis_resultTupleScheme();
      }
    }

    private static class borrarAnalisis_resultTupleScheme extends TupleScheme<borrarAnalisis_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, borrarAnalisis_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, borrarAnalisis_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class borrarDoctor_args implements org.apache.thrift.TBase<borrarDoctor_args, borrarDoctor_args._Fields>, java.io.Serializable, Cloneable, Comparable<borrarDoctor_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("borrarDoctor_args");

    private static final org.apache.thrift.protocol.TField CLAVE_DOCTOR_FIELD_DESC = new org.apache.thrift.protocol.TField("claveDoctor", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new borrarDoctor_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new borrarDoctor_argsTupleSchemeFactory());
    }

    public String claveDoctor; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLAVE_DOCTOR((short)1, "claveDoctor");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLAVE_DOCTOR
            return CLAVE_DOCTOR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLAVE_DOCTOR, new org.apache.thrift.meta_data.FieldMetaData("claveDoctor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(borrarDoctor_args.class, metaDataMap);
    }

    public borrarDoctor_args() {
    }

    public borrarDoctor_args(
      String claveDoctor)
    {
      this();
      this.claveDoctor = claveDoctor;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public borrarDoctor_args(borrarDoctor_args other) {
      if (other.isSetClaveDoctor()) {
        this.claveDoctor = other.claveDoctor;
      }
    }

    public borrarDoctor_args deepCopy() {
      return new borrarDoctor_args(this);
    }

    @Override
    public void clear() {
      this.claveDoctor = null;
    }

    public String getClaveDoctor() {
      return this.claveDoctor;
    }

    public borrarDoctor_args setClaveDoctor(String claveDoctor) {
      this.claveDoctor = claveDoctor;
      return this;
    }

    public void unsetClaveDoctor() {
      this.claveDoctor = null;
    }

    /** Returns true if field claveDoctor is set (has been assigned a value) and false otherwise */
    public boolean isSetClaveDoctor() {
      return this.claveDoctor != null;
    }

    public void setClaveDoctorIsSet(boolean value) {
      if (!value) {
        this.claveDoctor = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLAVE_DOCTOR:
        if (value == null) {
          unsetClaveDoctor();
        } else {
          setClaveDoctor((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLAVE_DOCTOR:
        return getClaveDoctor();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLAVE_DOCTOR:
        return isSetClaveDoctor();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof borrarDoctor_args)
        return this.equals((borrarDoctor_args)that);
      return false;
    }

    public boolean equals(borrarDoctor_args that) {
      if (that == null)
        return false;

      boolean this_present_claveDoctor = true && this.isSetClaveDoctor();
      boolean that_present_claveDoctor = true && that.isSetClaveDoctor();
      if (this_present_claveDoctor || that_present_claveDoctor) {
        if (!(this_present_claveDoctor && that_present_claveDoctor))
          return false;
        if (!this.claveDoctor.equals(that.claveDoctor))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(borrarDoctor_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClaveDoctor()).compareTo(other.isSetClaveDoctor());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClaveDoctor()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.claveDoctor, other.claveDoctor);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("borrarDoctor_args(");
      boolean first = true;

      sb.append("claveDoctor:");
      if (this.claveDoctor == null) {
        sb.append("null");
      } else {
        sb.append(this.claveDoctor);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class borrarDoctor_argsStandardSchemeFactory implements SchemeFactory {
      public borrarDoctor_argsStandardScheme getScheme() {
        return new borrarDoctor_argsStandardScheme();
      }
    }

    private static class borrarDoctor_argsStandardScheme extends StandardScheme<borrarDoctor_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, borrarDoctor_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLAVE_DOCTOR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.claveDoctor = iprot.readString();
                struct.setClaveDoctorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, borrarDoctor_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.claveDoctor != null) {
          oprot.writeFieldBegin(CLAVE_DOCTOR_FIELD_DESC);
          oprot.writeString(struct.claveDoctor);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class borrarDoctor_argsTupleSchemeFactory implements SchemeFactory {
      public borrarDoctor_argsTupleScheme getScheme() {
        return new borrarDoctor_argsTupleScheme();
      }
    }

    private static class borrarDoctor_argsTupleScheme extends TupleScheme<borrarDoctor_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, borrarDoctor_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClaveDoctor()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetClaveDoctor()) {
          oprot.writeString(struct.claveDoctor);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, borrarDoctor_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.claveDoctor = iprot.readString();
          struct.setClaveDoctorIsSet(true);
        }
      }
    }

  }

  public static class borrarDoctor_result implements org.apache.thrift.TBase<borrarDoctor_result, borrarDoctor_result._Fields>, java.io.Serializable, Cloneable, Comparable<borrarDoctor_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("borrarDoctor_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new borrarDoctor_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new borrarDoctor_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(borrarDoctor_result.class, metaDataMap);
    }

    public borrarDoctor_result() {
    }

    public borrarDoctor_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public borrarDoctor_result(borrarDoctor_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public borrarDoctor_result deepCopy() {
      return new borrarDoctor_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public borrarDoctor_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof borrarDoctor_result)
        return this.equals((borrarDoctor_result)that);
      return false;
    }

    public boolean equals(borrarDoctor_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(borrarDoctor_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("borrarDoctor_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class borrarDoctor_resultStandardSchemeFactory implements SchemeFactory {
      public borrarDoctor_resultStandardScheme getScheme() {
        return new borrarDoctor_resultStandardScheme();
      }
    }

    private static class borrarDoctor_resultStandardScheme extends StandardScheme<borrarDoctor_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, borrarDoctor_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, borrarDoctor_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class borrarDoctor_resultTupleSchemeFactory implements SchemeFactory {
      public borrarDoctor_resultTupleScheme getScheme() {
        return new borrarDoctor_resultTupleScheme();
      }
    }

    private static class borrarDoctor_resultTupleScheme extends TupleScheme<borrarDoctor_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, borrarDoctor_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, borrarDoctor_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class borrarPaciente_args implements org.apache.thrift.TBase<borrarPaciente_args, borrarPaciente_args._Fields>, java.io.Serializable, Cloneable, Comparable<borrarPaciente_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("borrarPaciente_args");

    private static final org.apache.thrift.protocol.TField CLAVE_PACIENTE_FIELD_DESC = new org.apache.thrift.protocol.TField("clavePaciente", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new borrarPaciente_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new borrarPaciente_argsTupleSchemeFactory());
    }

    public String clavePaciente; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLAVE_PACIENTE((short)1, "clavePaciente");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLAVE_PACIENTE
            return CLAVE_PACIENTE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLAVE_PACIENTE, new org.apache.thrift.meta_data.FieldMetaData("clavePaciente", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(borrarPaciente_args.class, metaDataMap);
    }

    public borrarPaciente_args() {
    }

    public borrarPaciente_args(
      String clavePaciente)
    {
      this();
      this.clavePaciente = clavePaciente;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public borrarPaciente_args(borrarPaciente_args other) {
      if (other.isSetClavePaciente()) {
        this.clavePaciente = other.clavePaciente;
      }
    }

    public borrarPaciente_args deepCopy() {
      return new borrarPaciente_args(this);
    }

    @Override
    public void clear() {
      this.clavePaciente = null;
    }

    public String getClavePaciente() {
      return this.clavePaciente;
    }

    public borrarPaciente_args setClavePaciente(String clavePaciente) {
      this.clavePaciente = clavePaciente;
      return this;
    }

    public void unsetClavePaciente() {
      this.clavePaciente = null;
    }

    /** Returns true if field clavePaciente is set (has been assigned a value) and false otherwise */
    public boolean isSetClavePaciente() {
      return this.clavePaciente != null;
    }

    public void setClavePacienteIsSet(boolean value) {
      if (!value) {
        this.clavePaciente = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLAVE_PACIENTE:
        if (value == null) {
          unsetClavePaciente();
        } else {
          setClavePaciente((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLAVE_PACIENTE:
        return getClavePaciente();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLAVE_PACIENTE:
        return isSetClavePaciente();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof borrarPaciente_args)
        return this.equals((borrarPaciente_args)that);
      return false;
    }

    public boolean equals(borrarPaciente_args that) {
      if (that == null)
        return false;

      boolean this_present_clavePaciente = true && this.isSetClavePaciente();
      boolean that_present_clavePaciente = true && that.isSetClavePaciente();
      if (this_present_clavePaciente || that_present_clavePaciente) {
        if (!(this_present_clavePaciente && that_present_clavePaciente))
          return false;
        if (!this.clavePaciente.equals(that.clavePaciente))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(borrarPaciente_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClavePaciente()).compareTo(other.isSetClavePaciente());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClavePaciente()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clavePaciente, other.clavePaciente);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("borrarPaciente_args(");
      boolean first = true;

      sb.append("clavePaciente:");
      if (this.clavePaciente == null) {
        sb.append("null");
      } else {
        sb.append(this.clavePaciente);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class borrarPaciente_argsStandardSchemeFactory implements SchemeFactory {
      public borrarPaciente_argsStandardScheme getScheme() {
        return new borrarPaciente_argsStandardScheme();
      }
    }

    private static class borrarPaciente_argsStandardScheme extends StandardScheme<borrarPaciente_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, borrarPaciente_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLAVE_PACIENTE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clavePaciente = iprot.readString();
                struct.setClavePacienteIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, borrarPaciente_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clavePaciente != null) {
          oprot.writeFieldBegin(CLAVE_PACIENTE_FIELD_DESC);
          oprot.writeString(struct.clavePaciente);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class borrarPaciente_argsTupleSchemeFactory implements SchemeFactory {
      public borrarPaciente_argsTupleScheme getScheme() {
        return new borrarPaciente_argsTupleScheme();
      }
    }

    private static class borrarPaciente_argsTupleScheme extends TupleScheme<borrarPaciente_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, borrarPaciente_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClavePaciente()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetClavePaciente()) {
          oprot.writeString(struct.clavePaciente);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, borrarPaciente_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.clavePaciente = iprot.readString();
          struct.setClavePacienteIsSet(true);
        }
      }
    }

  }

  public static class borrarPaciente_result implements org.apache.thrift.TBase<borrarPaciente_result, borrarPaciente_result._Fields>, java.io.Serializable, Cloneable, Comparable<borrarPaciente_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("borrarPaciente_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new borrarPaciente_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new borrarPaciente_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(borrarPaciente_result.class, metaDataMap);
    }

    public borrarPaciente_result() {
    }

    public borrarPaciente_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public borrarPaciente_result(borrarPaciente_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public borrarPaciente_result deepCopy() {
      return new borrarPaciente_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public borrarPaciente_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof borrarPaciente_result)
        return this.equals((borrarPaciente_result)that);
      return false;
    }

    public boolean equals(borrarPaciente_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(borrarPaciente_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("borrarPaciente_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class borrarPaciente_resultStandardSchemeFactory implements SchemeFactory {
      public borrarPaciente_resultStandardScheme getScheme() {
        return new borrarPaciente_resultStandardScheme();
      }
    }

    private static class borrarPaciente_resultStandardScheme extends StandardScheme<borrarPaciente_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, borrarPaciente_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, borrarPaciente_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class borrarPaciente_resultTupleSchemeFactory implements SchemeFactory {
      public borrarPaciente_resultTupleScheme getScheme() {
        return new borrarPaciente_resultTupleScheme();
      }
    }

    private static class borrarPaciente_resultTupleScheme extends TupleScheme<borrarPaciente_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, borrarPaciente_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, borrarPaciente_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class capturarAnalisis_args implements org.apache.thrift.TBase<capturarAnalisis_args, capturarAnalisis_args._Fields>, java.io.Serializable, Cloneable, Comparable<capturarAnalisis_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("capturarAnalisis_args");

    private static final org.apache.thrift.protocol.TField ANALISIS_FIELD_DESC = new org.apache.thrift.protocol.TField("analisis", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new capturarAnalisis_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new capturarAnalisis_argsTupleSchemeFactory());
    }

    public AnalisisClinico analisis; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ANALISIS((short)1, "analisis");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ANALISIS
            return ANALISIS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ANALISIS, new org.apache.thrift.meta_data.FieldMetaData("analisis", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AnalisisClinico.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(capturarAnalisis_args.class, metaDataMap);
    }

    public capturarAnalisis_args() {
    }

    public capturarAnalisis_args(
      AnalisisClinico analisis)
    {
      this();
      this.analisis = analisis;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public capturarAnalisis_args(capturarAnalisis_args other) {
      if (other.isSetAnalisis()) {
        this.analisis = new AnalisisClinico(other.analisis);
      }
    }

    public capturarAnalisis_args deepCopy() {
      return new capturarAnalisis_args(this);
    }

    @Override
    public void clear() {
      this.analisis = null;
    }

    public AnalisisClinico getAnalisis() {
      return this.analisis;
    }

    public capturarAnalisis_args setAnalisis(AnalisisClinico analisis) {
      this.analisis = analisis;
      return this;
    }

    public void unsetAnalisis() {
      this.analisis = null;
    }

    /** Returns true if field analisis is set (has been assigned a value) and false otherwise */
    public boolean isSetAnalisis() {
      return this.analisis != null;
    }

    public void setAnalisisIsSet(boolean value) {
      if (!value) {
        this.analisis = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ANALISIS:
        if (value == null) {
          unsetAnalisis();
        } else {
          setAnalisis((AnalisisClinico)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ANALISIS:
        return getAnalisis();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ANALISIS:
        return isSetAnalisis();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof capturarAnalisis_args)
        return this.equals((capturarAnalisis_args)that);
      return false;
    }

    public boolean equals(capturarAnalisis_args that) {
      if (that == null)
        return false;

      boolean this_present_analisis = true && this.isSetAnalisis();
      boolean that_present_analisis = true && that.isSetAnalisis();
      if (this_present_analisis || that_present_analisis) {
        if (!(this_present_analisis && that_present_analisis))
          return false;
        if (!this.analisis.equals(that.analisis))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(capturarAnalisis_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAnalisis()).compareTo(other.isSetAnalisis());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAnalisis()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.analisis, other.analisis);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("capturarAnalisis_args(");
      boolean first = true;

      sb.append("analisis:");
      if (this.analisis == null) {
        sb.append("null");
      } else {
        sb.append(this.analisis);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (analisis != null) {
        analisis.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class capturarAnalisis_argsStandardSchemeFactory implements SchemeFactory {
      public capturarAnalisis_argsStandardScheme getScheme() {
        return new capturarAnalisis_argsStandardScheme();
      }
    }

    private static class capturarAnalisis_argsStandardScheme extends StandardScheme<capturarAnalisis_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, capturarAnalisis_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ANALISIS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.analisis = new AnalisisClinico();
                struct.analisis.read(iprot);
                struct.setAnalisisIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, capturarAnalisis_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.analisis != null) {
          oprot.writeFieldBegin(ANALISIS_FIELD_DESC);
          struct.analisis.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class capturarAnalisis_argsTupleSchemeFactory implements SchemeFactory {
      public capturarAnalisis_argsTupleScheme getScheme() {
        return new capturarAnalisis_argsTupleScheme();
      }
    }

    private static class capturarAnalisis_argsTupleScheme extends TupleScheme<capturarAnalisis_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, capturarAnalisis_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAnalisis()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAnalisis()) {
          struct.analisis.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, capturarAnalisis_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.analisis = new AnalisisClinico();
          struct.analisis.read(iprot);
          struct.setAnalisisIsSet(true);
        }
      }
    }

  }

  public static class capturarAnalisis_result implements org.apache.thrift.TBase<capturarAnalisis_result, capturarAnalisis_result._Fields>, java.io.Serializable, Cloneable, Comparable<capturarAnalisis_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("capturarAnalisis_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new capturarAnalisis_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new capturarAnalisis_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(capturarAnalisis_result.class, metaDataMap);
    }

    public capturarAnalisis_result() {
    }

    public capturarAnalisis_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public capturarAnalisis_result(capturarAnalisis_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public capturarAnalisis_result deepCopy() {
      return new capturarAnalisis_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public capturarAnalisis_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof capturarAnalisis_result)
        return this.equals((capturarAnalisis_result)that);
      return false;
    }

    public boolean equals(capturarAnalisis_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(capturarAnalisis_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("capturarAnalisis_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class capturarAnalisis_resultStandardSchemeFactory implements SchemeFactory {
      public capturarAnalisis_resultStandardScheme getScheme() {
        return new capturarAnalisis_resultStandardScheme();
      }
    }

    private static class capturarAnalisis_resultStandardScheme extends StandardScheme<capturarAnalisis_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, capturarAnalisis_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, capturarAnalisis_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class capturarAnalisis_resultTupleSchemeFactory implements SchemeFactory {
      public capturarAnalisis_resultTupleScheme getScheme() {
        return new capturarAnalisis_resultTupleScheme();
      }
    }

    private static class capturarAnalisis_resultTupleScheme extends TupleScheme<capturarAnalisis_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, capturarAnalisis_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, capturarAnalisis_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class capturarDoctor_args implements org.apache.thrift.TBase<capturarDoctor_args, capturarDoctor_args._Fields>, java.io.Serializable, Cloneable, Comparable<capturarDoctor_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("capturarDoctor_args");

    private static final org.apache.thrift.protocol.TField DOCTOR_FIELD_DESC = new org.apache.thrift.protocol.TField("doctor", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new capturarDoctor_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new capturarDoctor_argsTupleSchemeFactory());
    }

    public Doctor doctor; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DOCTOR((short)1, "doctor");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DOCTOR
            return DOCTOR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DOCTOR, new org.apache.thrift.meta_data.FieldMetaData("doctor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Doctor.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(capturarDoctor_args.class, metaDataMap);
    }

    public capturarDoctor_args() {
    }

    public capturarDoctor_args(
      Doctor doctor)
    {
      this();
      this.doctor = doctor;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public capturarDoctor_args(capturarDoctor_args other) {
      if (other.isSetDoctor()) {
        this.doctor = new Doctor(other.doctor);
      }
    }

    public capturarDoctor_args deepCopy() {
      return new capturarDoctor_args(this);
    }

    @Override
    public void clear() {
      this.doctor = null;
    }

    public Doctor getDoctor() {
      return this.doctor;
    }

    public capturarDoctor_args setDoctor(Doctor doctor) {
      this.doctor = doctor;
      return this;
    }

    public void unsetDoctor() {
      this.doctor = null;
    }

    /** Returns true if field doctor is set (has been assigned a value) and false otherwise */
    public boolean isSetDoctor() {
      return this.doctor != null;
    }

    public void setDoctorIsSet(boolean value) {
      if (!value) {
        this.doctor = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DOCTOR:
        if (value == null) {
          unsetDoctor();
        } else {
          setDoctor((Doctor)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DOCTOR:
        return getDoctor();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DOCTOR:
        return isSetDoctor();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof capturarDoctor_args)
        return this.equals((capturarDoctor_args)that);
      return false;
    }

    public boolean equals(capturarDoctor_args that) {
      if (that == null)
        return false;

      boolean this_present_doctor = true && this.isSetDoctor();
      boolean that_present_doctor = true && that.isSetDoctor();
      if (this_present_doctor || that_present_doctor) {
        if (!(this_present_doctor && that_present_doctor))
          return false;
        if (!this.doctor.equals(that.doctor))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(capturarDoctor_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDoctor()).compareTo(other.isSetDoctor());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDoctor()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.doctor, other.doctor);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("capturarDoctor_args(");
      boolean first = true;

      sb.append("doctor:");
      if (this.doctor == null) {
        sb.append("null");
      } else {
        sb.append(this.doctor);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (doctor != null) {
        doctor.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class capturarDoctor_argsStandardSchemeFactory implements SchemeFactory {
      public capturarDoctor_argsStandardScheme getScheme() {
        return new capturarDoctor_argsStandardScheme();
      }
    }

    private static class capturarDoctor_argsStandardScheme extends StandardScheme<capturarDoctor_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, capturarDoctor_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DOCTOR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.doctor = new Doctor();
                struct.doctor.read(iprot);
                struct.setDoctorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, capturarDoctor_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.doctor != null) {
          oprot.writeFieldBegin(DOCTOR_FIELD_DESC);
          struct.doctor.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class capturarDoctor_argsTupleSchemeFactory implements SchemeFactory {
      public capturarDoctor_argsTupleScheme getScheme() {
        return new capturarDoctor_argsTupleScheme();
      }
    }

    private static class capturarDoctor_argsTupleScheme extends TupleScheme<capturarDoctor_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, capturarDoctor_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDoctor()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDoctor()) {
          struct.doctor.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, capturarDoctor_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.doctor = new Doctor();
          struct.doctor.read(iprot);
          struct.setDoctorIsSet(true);
        }
      }
    }

  }

  public static class capturarDoctor_result implements org.apache.thrift.TBase<capturarDoctor_result, capturarDoctor_result._Fields>, java.io.Serializable, Cloneable, Comparable<capturarDoctor_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("capturarDoctor_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new capturarDoctor_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new capturarDoctor_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(capturarDoctor_result.class, metaDataMap);
    }

    public capturarDoctor_result() {
    }

    public capturarDoctor_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public capturarDoctor_result(capturarDoctor_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public capturarDoctor_result deepCopy() {
      return new capturarDoctor_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public capturarDoctor_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof capturarDoctor_result)
        return this.equals((capturarDoctor_result)that);
      return false;
    }

    public boolean equals(capturarDoctor_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(capturarDoctor_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("capturarDoctor_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class capturarDoctor_resultStandardSchemeFactory implements SchemeFactory {
      public capturarDoctor_resultStandardScheme getScheme() {
        return new capturarDoctor_resultStandardScheme();
      }
    }

    private static class capturarDoctor_resultStandardScheme extends StandardScheme<capturarDoctor_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, capturarDoctor_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, capturarDoctor_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class capturarDoctor_resultTupleSchemeFactory implements SchemeFactory {
      public capturarDoctor_resultTupleScheme getScheme() {
        return new capturarDoctor_resultTupleScheme();
      }
    }

    private static class capturarDoctor_resultTupleScheme extends TupleScheme<capturarDoctor_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, capturarDoctor_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, capturarDoctor_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class capturarPaciente_args implements org.apache.thrift.TBase<capturarPaciente_args, capturarPaciente_args._Fields>, java.io.Serializable, Cloneable, Comparable<capturarPaciente_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("capturarPaciente_args");

    private static final org.apache.thrift.protocol.TField PACIENTE_FIELD_DESC = new org.apache.thrift.protocol.TField("paciente", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new capturarPaciente_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new capturarPaciente_argsTupleSchemeFactory());
    }

    public Paciente paciente; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PACIENTE((short)1, "paciente");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PACIENTE
            return PACIENTE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PACIENTE, new org.apache.thrift.meta_data.FieldMetaData("paciente", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Paciente.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(capturarPaciente_args.class, metaDataMap);
    }

    public capturarPaciente_args() {
    }

    public capturarPaciente_args(
      Paciente paciente)
    {
      this();
      this.paciente = paciente;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public capturarPaciente_args(capturarPaciente_args other) {
      if (other.isSetPaciente()) {
        this.paciente = new Paciente(other.paciente);
      }
    }

    public capturarPaciente_args deepCopy() {
      return new capturarPaciente_args(this);
    }

    @Override
    public void clear() {
      this.paciente = null;
    }

    public Paciente getPaciente() {
      return this.paciente;
    }

    public capturarPaciente_args setPaciente(Paciente paciente) {
      this.paciente = paciente;
      return this;
    }

    public void unsetPaciente() {
      this.paciente = null;
    }

    /** Returns true if field paciente is set (has been assigned a value) and false otherwise */
    public boolean isSetPaciente() {
      return this.paciente != null;
    }

    public void setPacienteIsSet(boolean value) {
      if (!value) {
        this.paciente = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PACIENTE:
        if (value == null) {
          unsetPaciente();
        } else {
          setPaciente((Paciente)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PACIENTE:
        return getPaciente();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PACIENTE:
        return isSetPaciente();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof capturarPaciente_args)
        return this.equals((capturarPaciente_args)that);
      return false;
    }

    public boolean equals(capturarPaciente_args that) {
      if (that == null)
        return false;

      boolean this_present_paciente = true && this.isSetPaciente();
      boolean that_present_paciente = true && that.isSetPaciente();
      if (this_present_paciente || that_present_paciente) {
        if (!(this_present_paciente && that_present_paciente))
          return false;
        if (!this.paciente.equals(that.paciente))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(capturarPaciente_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPaciente()).compareTo(other.isSetPaciente());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPaciente()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paciente, other.paciente);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("capturarPaciente_args(");
      boolean first = true;

      sb.append("paciente:");
      if (this.paciente == null) {
        sb.append("null");
      } else {
        sb.append(this.paciente);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (paciente != null) {
        paciente.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class capturarPaciente_argsStandardSchemeFactory implements SchemeFactory {
      public capturarPaciente_argsStandardScheme getScheme() {
        return new capturarPaciente_argsStandardScheme();
      }
    }

    private static class capturarPaciente_argsStandardScheme extends StandardScheme<capturarPaciente_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, capturarPaciente_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PACIENTE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.paciente = new Paciente();
                struct.paciente.read(iprot);
                struct.setPacienteIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, capturarPaciente_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.paciente != null) {
          oprot.writeFieldBegin(PACIENTE_FIELD_DESC);
          struct.paciente.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class capturarPaciente_argsTupleSchemeFactory implements SchemeFactory {
      public capturarPaciente_argsTupleScheme getScheme() {
        return new capturarPaciente_argsTupleScheme();
      }
    }

    private static class capturarPaciente_argsTupleScheme extends TupleScheme<capturarPaciente_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, capturarPaciente_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPaciente()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPaciente()) {
          struct.paciente.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, capturarPaciente_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.paciente = new Paciente();
          struct.paciente.read(iprot);
          struct.setPacienteIsSet(true);
        }
      }
    }

  }

  public static class capturarPaciente_result implements org.apache.thrift.TBase<capturarPaciente_result, capturarPaciente_result._Fields>, java.io.Serializable, Cloneable, Comparable<capturarPaciente_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("capturarPaciente_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new capturarPaciente_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new capturarPaciente_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(capturarPaciente_result.class, metaDataMap);
    }

    public capturarPaciente_result() {
    }

    public capturarPaciente_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public capturarPaciente_result(capturarPaciente_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public capturarPaciente_result deepCopy() {
      return new capturarPaciente_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public capturarPaciente_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof capturarPaciente_result)
        return this.equals((capturarPaciente_result)that);
      return false;
    }

    public boolean equals(capturarPaciente_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(capturarPaciente_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("capturarPaciente_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class capturarPaciente_resultStandardSchemeFactory implements SchemeFactory {
      public capturarPaciente_resultStandardScheme getScheme() {
        return new capturarPaciente_resultStandardScheme();
      }
    }

    private static class capturarPaciente_resultStandardScheme extends StandardScheme<capturarPaciente_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, capturarPaciente_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, capturarPaciente_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class capturarPaciente_resultTupleSchemeFactory implements SchemeFactory {
      public capturarPaciente_resultTupleScheme getScheme() {
        return new capturarPaciente_resultTupleScheme();
      }
    }

    private static class capturarPaciente_resultTupleScheme extends TupleScheme<capturarPaciente_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, capturarPaciente_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, capturarPaciente_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class capturarAtiende_args implements org.apache.thrift.TBase<capturarAtiende_args, capturarAtiende_args._Fields>, java.io.Serializable, Cloneable, Comparable<capturarAtiende_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("capturarAtiende_args");

    private static final org.apache.thrift.protocol.TField ATIENDE_FIELD_DESC = new org.apache.thrift.protocol.TField("atiende", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new capturarAtiende_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new capturarAtiende_argsTupleSchemeFactory());
    }

    public Atiende atiende; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ATIENDE((short)1, "atiende");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ATIENDE
            return ATIENDE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ATIENDE, new org.apache.thrift.meta_data.FieldMetaData("atiende", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Atiende.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(capturarAtiende_args.class, metaDataMap);
    }

    public capturarAtiende_args() {
    }

    public capturarAtiende_args(
      Atiende atiende)
    {
      this();
      this.atiende = atiende;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public capturarAtiende_args(capturarAtiende_args other) {
      if (other.isSetAtiende()) {
        this.atiende = new Atiende(other.atiende);
      }
    }

    public capturarAtiende_args deepCopy() {
      return new capturarAtiende_args(this);
    }

    @Override
    public void clear() {
      this.atiende = null;
    }

    public Atiende getAtiende() {
      return this.atiende;
    }

    public capturarAtiende_args setAtiende(Atiende atiende) {
      this.atiende = atiende;
      return this;
    }

    public void unsetAtiende() {
      this.atiende = null;
    }

    /** Returns true if field atiende is set (has been assigned a value) and false otherwise */
    public boolean isSetAtiende() {
      return this.atiende != null;
    }

    public void setAtiendeIsSet(boolean value) {
      if (!value) {
        this.atiende = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ATIENDE:
        if (value == null) {
          unsetAtiende();
        } else {
          setAtiende((Atiende)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ATIENDE:
        return getAtiende();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ATIENDE:
        return isSetAtiende();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof capturarAtiende_args)
        return this.equals((capturarAtiende_args)that);
      return false;
    }

    public boolean equals(capturarAtiende_args that) {
      if (that == null)
        return false;

      boolean this_present_atiende = true && this.isSetAtiende();
      boolean that_present_atiende = true && that.isSetAtiende();
      if (this_present_atiende || that_present_atiende) {
        if (!(this_present_atiende && that_present_atiende))
          return false;
        if (!this.atiende.equals(that.atiende))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(capturarAtiende_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAtiende()).compareTo(other.isSetAtiende());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAtiende()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.atiende, other.atiende);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("capturarAtiende_args(");
      boolean first = true;

      sb.append("atiende:");
      if (this.atiende == null) {
        sb.append("null");
      } else {
        sb.append(this.atiende);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (atiende != null) {
        atiende.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class capturarAtiende_argsStandardSchemeFactory implements SchemeFactory {
      public capturarAtiende_argsStandardScheme getScheme() {
        return new capturarAtiende_argsStandardScheme();
      }
    }

    private static class capturarAtiende_argsStandardScheme extends StandardScheme<capturarAtiende_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, capturarAtiende_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ATIENDE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.atiende = new Atiende();
                struct.atiende.read(iprot);
                struct.setAtiendeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, capturarAtiende_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.atiende != null) {
          oprot.writeFieldBegin(ATIENDE_FIELD_DESC);
          struct.atiende.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class capturarAtiende_argsTupleSchemeFactory implements SchemeFactory {
      public capturarAtiende_argsTupleScheme getScheme() {
        return new capturarAtiende_argsTupleScheme();
      }
    }

    private static class capturarAtiende_argsTupleScheme extends TupleScheme<capturarAtiende_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, capturarAtiende_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAtiende()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAtiende()) {
          struct.atiende.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, capturarAtiende_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.atiende = new Atiende();
          struct.atiende.read(iprot);
          struct.setAtiendeIsSet(true);
        }
      }
    }

  }

  public static class capturarAtiende_result implements org.apache.thrift.TBase<capturarAtiende_result, capturarAtiende_result._Fields>, java.io.Serializable, Cloneable, Comparable<capturarAtiende_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("capturarAtiende_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new capturarAtiende_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new capturarAtiende_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(capturarAtiende_result.class, metaDataMap);
    }

    public capturarAtiende_result() {
    }

    public capturarAtiende_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public capturarAtiende_result(capturarAtiende_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public capturarAtiende_result deepCopy() {
      return new capturarAtiende_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public capturarAtiende_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof capturarAtiende_result)
        return this.equals((capturarAtiende_result)that);
      return false;
    }

    public boolean equals(capturarAtiende_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(capturarAtiende_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("capturarAtiende_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class capturarAtiende_resultStandardSchemeFactory implements SchemeFactory {
      public capturarAtiende_resultStandardScheme getScheme() {
        return new capturarAtiende_resultStandardScheme();
      }
    }

    private static class capturarAtiende_resultStandardScheme extends StandardScheme<capturarAtiende_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, capturarAtiende_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, capturarAtiende_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class capturarAtiende_resultTupleSchemeFactory implements SchemeFactory {
      public capturarAtiende_resultTupleScheme getScheme() {
        return new capturarAtiende_resultTupleScheme();
      }
    }

    private static class capturarAtiende_resultTupleScheme extends TupleScheme<capturarAtiende_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, capturarAtiende_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, capturarAtiende_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class capturarSeRealiza_args implements org.apache.thrift.TBase<capturarSeRealiza_args, capturarSeRealiza_args._Fields>, java.io.Serializable, Cloneable, Comparable<capturarSeRealiza_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("capturarSeRealiza_args");

    private static final org.apache.thrift.protocol.TField SE_REALIZA_FIELD_DESC = new org.apache.thrift.protocol.TField("seRealiza", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new capturarSeRealiza_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new capturarSeRealiza_argsTupleSchemeFactory());
    }

    public SeRealiza seRealiza; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SE_REALIZA((short)1, "seRealiza");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SE_REALIZA
            return SE_REALIZA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SE_REALIZA, new org.apache.thrift.meta_data.FieldMetaData("seRealiza", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SeRealiza.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(capturarSeRealiza_args.class, metaDataMap);
    }

    public capturarSeRealiza_args() {
    }

    public capturarSeRealiza_args(
      SeRealiza seRealiza)
    {
      this();
      this.seRealiza = seRealiza;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public capturarSeRealiza_args(capturarSeRealiza_args other) {
      if (other.isSetSeRealiza()) {
        this.seRealiza = new SeRealiza(other.seRealiza);
      }
    }

    public capturarSeRealiza_args deepCopy() {
      return new capturarSeRealiza_args(this);
    }

    @Override
    public void clear() {
      this.seRealiza = null;
    }

    public SeRealiza getSeRealiza() {
      return this.seRealiza;
    }

    public capturarSeRealiza_args setSeRealiza(SeRealiza seRealiza) {
      this.seRealiza = seRealiza;
      return this;
    }

    public void unsetSeRealiza() {
      this.seRealiza = null;
    }

    /** Returns true if field seRealiza is set (has been assigned a value) and false otherwise */
    public boolean isSetSeRealiza() {
      return this.seRealiza != null;
    }

    public void setSeRealizaIsSet(boolean value) {
      if (!value) {
        this.seRealiza = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SE_REALIZA:
        if (value == null) {
          unsetSeRealiza();
        } else {
          setSeRealiza((SeRealiza)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SE_REALIZA:
        return getSeRealiza();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SE_REALIZA:
        return isSetSeRealiza();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof capturarSeRealiza_args)
        return this.equals((capturarSeRealiza_args)that);
      return false;
    }

    public boolean equals(capturarSeRealiza_args that) {
      if (that == null)
        return false;

      boolean this_present_seRealiza = true && this.isSetSeRealiza();
      boolean that_present_seRealiza = true && that.isSetSeRealiza();
      if (this_present_seRealiza || that_present_seRealiza) {
        if (!(this_present_seRealiza && that_present_seRealiza))
          return false;
        if (!this.seRealiza.equals(that.seRealiza))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(capturarSeRealiza_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSeRealiza()).compareTo(other.isSetSeRealiza());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSeRealiza()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seRealiza, other.seRealiza);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("capturarSeRealiza_args(");
      boolean first = true;

      sb.append("seRealiza:");
      if (this.seRealiza == null) {
        sb.append("null");
      } else {
        sb.append(this.seRealiza);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (seRealiza != null) {
        seRealiza.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class capturarSeRealiza_argsStandardSchemeFactory implements SchemeFactory {
      public capturarSeRealiza_argsStandardScheme getScheme() {
        return new capturarSeRealiza_argsStandardScheme();
      }
    }

    private static class capturarSeRealiza_argsStandardScheme extends StandardScheme<capturarSeRealiza_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, capturarSeRealiza_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SE_REALIZA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.seRealiza = new SeRealiza();
                struct.seRealiza.read(iprot);
                struct.setSeRealizaIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, capturarSeRealiza_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.seRealiza != null) {
          oprot.writeFieldBegin(SE_REALIZA_FIELD_DESC);
          struct.seRealiza.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class capturarSeRealiza_argsTupleSchemeFactory implements SchemeFactory {
      public capturarSeRealiza_argsTupleScheme getScheme() {
        return new capturarSeRealiza_argsTupleScheme();
      }
    }

    private static class capturarSeRealiza_argsTupleScheme extends TupleScheme<capturarSeRealiza_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, capturarSeRealiza_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSeRealiza()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSeRealiza()) {
          struct.seRealiza.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, capturarSeRealiza_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.seRealiza = new SeRealiza();
          struct.seRealiza.read(iprot);
          struct.setSeRealizaIsSet(true);
        }
      }
    }

  }

  public static class capturarSeRealiza_result implements org.apache.thrift.TBase<capturarSeRealiza_result, capturarSeRealiza_result._Fields>, java.io.Serializable, Cloneable, Comparable<capturarSeRealiza_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("capturarSeRealiza_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new capturarSeRealiza_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new capturarSeRealiza_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(capturarSeRealiza_result.class, metaDataMap);
    }

    public capturarSeRealiza_result() {
    }

    public capturarSeRealiza_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public capturarSeRealiza_result(capturarSeRealiza_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public capturarSeRealiza_result deepCopy() {
      return new capturarSeRealiza_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public capturarSeRealiza_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof capturarSeRealiza_result)
        return this.equals((capturarSeRealiza_result)that);
      return false;
    }

    public boolean equals(capturarSeRealiza_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(capturarSeRealiza_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("capturarSeRealiza_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class capturarSeRealiza_resultStandardSchemeFactory implements SchemeFactory {
      public capturarSeRealiza_resultStandardScheme getScheme() {
        return new capturarSeRealiza_resultStandardScheme();
      }
    }

    private static class capturarSeRealiza_resultStandardScheme extends StandardScheme<capturarSeRealiza_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, capturarSeRealiza_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, capturarSeRealiza_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class capturarSeRealiza_resultTupleSchemeFactory implements SchemeFactory {
      public capturarSeRealiza_resultTupleScheme getScheme() {
        return new capturarSeRealiza_resultTupleScheme();
      }
    }

    private static class capturarSeRealiza_resultTupleScheme extends TupleScheme<capturarSeRealiza_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, capturarSeRealiza_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, capturarSeRealiza_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class consultarAnalisis_args implements org.apache.thrift.TBase<consultarAnalisis_args, consultarAnalisis_args._Fields>, java.io.Serializable, Cloneable, Comparable<consultarAnalisis_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("consultarAnalisis_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new consultarAnalisis_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new consultarAnalisis_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(consultarAnalisis_args.class, metaDataMap);
    }

    public consultarAnalisis_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public consultarAnalisis_args(consultarAnalisis_args other) {
    }

    public consultarAnalisis_args deepCopy() {
      return new consultarAnalisis_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof consultarAnalisis_args)
        return this.equals((consultarAnalisis_args)that);
      return false;
    }

    public boolean equals(consultarAnalisis_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(consultarAnalisis_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("consultarAnalisis_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class consultarAnalisis_argsStandardSchemeFactory implements SchemeFactory {
      public consultarAnalisis_argsStandardScheme getScheme() {
        return new consultarAnalisis_argsStandardScheme();
      }
    }

    private static class consultarAnalisis_argsStandardScheme extends StandardScheme<consultarAnalisis_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, consultarAnalisis_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, consultarAnalisis_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class consultarAnalisis_argsTupleSchemeFactory implements SchemeFactory {
      public consultarAnalisis_argsTupleScheme getScheme() {
        return new consultarAnalisis_argsTupleScheme();
      }
    }

    private static class consultarAnalisis_argsTupleScheme extends TupleScheme<consultarAnalisis_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, consultarAnalisis_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, consultarAnalisis_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class consultarAnalisis_result implements org.apache.thrift.TBase<consultarAnalisis_result, consultarAnalisis_result._Fields>, java.io.Serializable, Cloneable, Comparable<consultarAnalisis_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("consultarAnalisis_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new consultarAnalisis_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new consultarAnalisis_resultTupleSchemeFactory());
    }

    public List<AnalisisClinico> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AnalisisClinico.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(consultarAnalisis_result.class, metaDataMap);
    }

    public consultarAnalisis_result() {
    }

    public consultarAnalisis_result(
      List<AnalisisClinico> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public consultarAnalisis_result(consultarAnalisis_result other) {
      if (other.isSetSuccess()) {
        List<AnalisisClinico> __this__success = new ArrayList<AnalisisClinico>(other.success.size());
        for (AnalisisClinico other_element : other.success) {
          __this__success.add(new AnalisisClinico(other_element));
        }
        this.success = __this__success;
      }
    }

    public consultarAnalisis_result deepCopy() {
      return new consultarAnalisis_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<AnalisisClinico> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(AnalisisClinico elem) {
      if (this.success == null) {
        this.success = new ArrayList<AnalisisClinico>();
      }
      this.success.add(elem);
    }

    public List<AnalisisClinico> getSuccess() {
      return this.success;
    }

    public consultarAnalisis_result setSuccess(List<AnalisisClinico> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<AnalisisClinico>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof consultarAnalisis_result)
        return this.equals((consultarAnalisis_result)that);
      return false;
    }

    public boolean equals(consultarAnalisis_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(consultarAnalisis_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("consultarAnalisis_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class consultarAnalisis_resultStandardSchemeFactory implements SchemeFactory {
      public consultarAnalisis_resultStandardScheme getScheme() {
        return new consultarAnalisis_resultStandardScheme();
      }
    }

    private static class consultarAnalisis_resultStandardScheme extends StandardScheme<consultarAnalisis_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, consultarAnalisis_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<AnalisisClinico>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    AnalisisClinico _elem2;
                    _elem2 = new AnalisisClinico();
                    _elem2.read(iprot);
                    struct.success.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, consultarAnalisis_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (AnalisisClinico _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class consultarAnalisis_resultTupleSchemeFactory implements SchemeFactory {
      public consultarAnalisis_resultTupleScheme getScheme() {
        return new consultarAnalisis_resultTupleScheme();
      }
    }

    private static class consultarAnalisis_resultTupleScheme extends TupleScheme<consultarAnalisis_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, consultarAnalisis_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (AnalisisClinico _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, consultarAnalisis_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<AnalisisClinico>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
            {
              AnalisisClinico _elem7;
              _elem7 = new AnalisisClinico();
              _elem7.read(iprot);
              struct.success.add(_elem7);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class consultarAtiende_args implements org.apache.thrift.TBase<consultarAtiende_args, consultarAtiende_args._Fields>, java.io.Serializable, Cloneable, Comparable<consultarAtiende_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("consultarAtiende_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new consultarAtiende_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new consultarAtiende_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(consultarAtiende_args.class, metaDataMap);
    }

    public consultarAtiende_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public consultarAtiende_args(consultarAtiende_args other) {
    }

    public consultarAtiende_args deepCopy() {
      return new consultarAtiende_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof consultarAtiende_args)
        return this.equals((consultarAtiende_args)that);
      return false;
    }

    public boolean equals(consultarAtiende_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(consultarAtiende_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("consultarAtiende_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class consultarAtiende_argsStandardSchemeFactory implements SchemeFactory {
      public consultarAtiende_argsStandardScheme getScheme() {
        return new consultarAtiende_argsStandardScheme();
      }
    }

    private static class consultarAtiende_argsStandardScheme extends StandardScheme<consultarAtiende_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, consultarAtiende_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, consultarAtiende_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class consultarAtiende_argsTupleSchemeFactory implements SchemeFactory {
      public consultarAtiende_argsTupleScheme getScheme() {
        return new consultarAtiende_argsTupleScheme();
      }
    }

    private static class consultarAtiende_argsTupleScheme extends TupleScheme<consultarAtiende_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, consultarAtiende_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, consultarAtiende_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class consultarAtiende_result implements org.apache.thrift.TBase<consultarAtiende_result, consultarAtiende_result._Fields>, java.io.Serializable, Cloneable, Comparable<consultarAtiende_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("consultarAtiende_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new consultarAtiende_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new consultarAtiende_resultTupleSchemeFactory());
    }

    public List<Atiende> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Atiende.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(consultarAtiende_result.class, metaDataMap);
    }

    public consultarAtiende_result() {
    }

    public consultarAtiende_result(
      List<Atiende> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public consultarAtiende_result(consultarAtiende_result other) {
      if (other.isSetSuccess()) {
        List<Atiende> __this__success = new ArrayList<Atiende>(other.success.size());
        for (Atiende other_element : other.success) {
          __this__success.add(new Atiende(other_element));
        }
        this.success = __this__success;
      }
    }

    public consultarAtiende_result deepCopy() {
      return new consultarAtiende_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Atiende> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Atiende elem) {
      if (this.success == null) {
        this.success = new ArrayList<Atiende>();
      }
      this.success.add(elem);
    }

    public List<Atiende> getSuccess() {
      return this.success;
    }

    public consultarAtiende_result setSuccess(List<Atiende> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Atiende>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof consultarAtiende_result)
        return this.equals((consultarAtiende_result)that);
      return false;
    }

    public boolean equals(consultarAtiende_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(consultarAtiende_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("consultarAtiende_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class consultarAtiende_resultStandardSchemeFactory implements SchemeFactory {
      public consultarAtiende_resultStandardScheme getScheme() {
        return new consultarAtiende_resultStandardScheme();
      }
    }

    private static class consultarAtiende_resultStandardScheme extends StandardScheme<consultarAtiende_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, consultarAtiende_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<Atiende>(_list8.size);
                  for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                  {
                    Atiende _elem10;
                    _elem10 = new Atiende();
                    _elem10.read(iprot);
                    struct.success.add(_elem10);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, consultarAtiende_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Atiende _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class consultarAtiende_resultTupleSchemeFactory implements SchemeFactory {
      public consultarAtiende_resultTupleScheme getScheme() {
        return new consultarAtiende_resultTupleScheme();
      }
    }

    private static class consultarAtiende_resultTupleScheme extends TupleScheme<consultarAtiende_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, consultarAtiende_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Atiende _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, consultarAtiende_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Atiende>(_list13.size);
            for (int _i14 = 0; _i14 < _list13.size; ++_i14)
            {
              Atiende _elem15;
              _elem15 = new Atiende();
              _elem15.read(iprot);
              struct.success.add(_elem15);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class consultarDoctores_args implements org.apache.thrift.TBase<consultarDoctores_args, consultarDoctores_args._Fields>, java.io.Serializable, Cloneable, Comparable<consultarDoctores_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("consultarDoctores_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new consultarDoctores_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new consultarDoctores_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(consultarDoctores_args.class, metaDataMap);
    }

    public consultarDoctores_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public consultarDoctores_args(consultarDoctores_args other) {
    }

    public consultarDoctores_args deepCopy() {
      return new consultarDoctores_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof consultarDoctores_args)
        return this.equals((consultarDoctores_args)that);
      return false;
    }

    public boolean equals(consultarDoctores_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(consultarDoctores_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("consultarDoctores_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class consultarDoctores_argsStandardSchemeFactory implements SchemeFactory {
      public consultarDoctores_argsStandardScheme getScheme() {
        return new consultarDoctores_argsStandardScheme();
      }
    }

    private static class consultarDoctores_argsStandardScheme extends StandardScheme<consultarDoctores_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, consultarDoctores_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, consultarDoctores_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class consultarDoctores_argsTupleSchemeFactory implements SchemeFactory {
      public consultarDoctores_argsTupleScheme getScheme() {
        return new consultarDoctores_argsTupleScheme();
      }
    }

    private static class consultarDoctores_argsTupleScheme extends TupleScheme<consultarDoctores_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, consultarDoctores_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, consultarDoctores_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class consultarDoctores_result implements org.apache.thrift.TBase<consultarDoctores_result, consultarDoctores_result._Fields>, java.io.Serializable, Cloneable, Comparable<consultarDoctores_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("consultarDoctores_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new consultarDoctores_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new consultarDoctores_resultTupleSchemeFactory());
    }

    public List<Doctor> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Doctor.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(consultarDoctores_result.class, metaDataMap);
    }

    public consultarDoctores_result() {
    }

    public consultarDoctores_result(
      List<Doctor> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public consultarDoctores_result(consultarDoctores_result other) {
      if (other.isSetSuccess()) {
        List<Doctor> __this__success = new ArrayList<Doctor>(other.success.size());
        for (Doctor other_element : other.success) {
          __this__success.add(new Doctor(other_element));
        }
        this.success = __this__success;
      }
    }

    public consultarDoctores_result deepCopy() {
      return new consultarDoctores_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Doctor> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Doctor elem) {
      if (this.success == null) {
        this.success = new ArrayList<Doctor>();
      }
      this.success.add(elem);
    }

    public List<Doctor> getSuccess() {
      return this.success;
    }

    public consultarDoctores_result setSuccess(List<Doctor> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Doctor>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof consultarDoctores_result)
        return this.equals((consultarDoctores_result)that);
      return false;
    }

    public boolean equals(consultarDoctores_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(consultarDoctores_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("consultarDoctores_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class consultarDoctores_resultStandardSchemeFactory implements SchemeFactory {
      public consultarDoctores_resultStandardScheme getScheme() {
        return new consultarDoctores_resultStandardScheme();
      }
    }

    private static class consultarDoctores_resultStandardScheme extends StandardScheme<consultarDoctores_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, consultarDoctores_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new ArrayList<Doctor>(_list16.size);
                  for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                  {
                    Doctor _elem18;
                    _elem18 = new Doctor();
                    _elem18.read(iprot);
                    struct.success.add(_elem18);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, consultarDoctores_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Doctor _iter19 : struct.success)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class consultarDoctores_resultTupleSchemeFactory implements SchemeFactory {
      public consultarDoctores_resultTupleScheme getScheme() {
        return new consultarDoctores_resultTupleScheme();
      }
    }

    private static class consultarDoctores_resultTupleScheme extends TupleScheme<consultarDoctores_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, consultarDoctores_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Doctor _iter20 : struct.success)
            {
              _iter20.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, consultarDoctores_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Doctor>(_list21.size);
            for (int _i22 = 0; _i22 < _list21.size; ++_i22)
            {
              Doctor _elem23;
              _elem23 = new Doctor();
              _elem23.read(iprot);
              struct.success.add(_elem23);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class consultarPacientes_args implements org.apache.thrift.TBase<consultarPacientes_args, consultarPacientes_args._Fields>, java.io.Serializable, Cloneable, Comparable<consultarPacientes_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("consultarPacientes_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new consultarPacientes_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new consultarPacientes_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(consultarPacientes_args.class, metaDataMap);
    }

    public consultarPacientes_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public consultarPacientes_args(consultarPacientes_args other) {
    }

    public consultarPacientes_args deepCopy() {
      return new consultarPacientes_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof consultarPacientes_args)
        return this.equals((consultarPacientes_args)that);
      return false;
    }

    public boolean equals(consultarPacientes_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(consultarPacientes_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("consultarPacientes_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class consultarPacientes_argsStandardSchemeFactory implements SchemeFactory {
      public consultarPacientes_argsStandardScheme getScheme() {
        return new consultarPacientes_argsStandardScheme();
      }
    }

    private static class consultarPacientes_argsStandardScheme extends StandardScheme<consultarPacientes_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, consultarPacientes_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, consultarPacientes_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class consultarPacientes_argsTupleSchemeFactory implements SchemeFactory {
      public consultarPacientes_argsTupleScheme getScheme() {
        return new consultarPacientes_argsTupleScheme();
      }
    }

    private static class consultarPacientes_argsTupleScheme extends TupleScheme<consultarPacientes_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, consultarPacientes_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, consultarPacientes_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class consultarPacientes_result implements org.apache.thrift.TBase<consultarPacientes_result, consultarPacientes_result._Fields>, java.io.Serializable, Cloneable, Comparable<consultarPacientes_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("consultarPacientes_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new consultarPacientes_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new consultarPacientes_resultTupleSchemeFactory());
    }

    public List<Paciente> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Paciente.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(consultarPacientes_result.class, metaDataMap);
    }

    public consultarPacientes_result() {
    }

    public consultarPacientes_result(
      List<Paciente> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public consultarPacientes_result(consultarPacientes_result other) {
      if (other.isSetSuccess()) {
        List<Paciente> __this__success = new ArrayList<Paciente>(other.success.size());
        for (Paciente other_element : other.success) {
          __this__success.add(new Paciente(other_element));
        }
        this.success = __this__success;
      }
    }

    public consultarPacientes_result deepCopy() {
      return new consultarPacientes_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Paciente> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Paciente elem) {
      if (this.success == null) {
        this.success = new ArrayList<Paciente>();
      }
      this.success.add(elem);
    }

    public List<Paciente> getSuccess() {
      return this.success;
    }

    public consultarPacientes_result setSuccess(List<Paciente> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Paciente>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof consultarPacientes_result)
        return this.equals((consultarPacientes_result)that);
      return false;
    }

    public boolean equals(consultarPacientes_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(consultarPacientes_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("consultarPacientes_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class consultarPacientes_resultStandardSchemeFactory implements SchemeFactory {
      public consultarPacientes_resultStandardScheme getScheme() {
        return new consultarPacientes_resultStandardScheme();
      }
    }

    private static class consultarPacientes_resultStandardScheme extends StandardScheme<consultarPacientes_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, consultarPacientes_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.success = new ArrayList<Paciente>(_list24.size);
                  for (int _i25 = 0; _i25 < _list24.size; ++_i25)
                  {
                    Paciente _elem26;
                    _elem26 = new Paciente();
                    _elem26.read(iprot);
                    struct.success.add(_elem26);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, consultarPacientes_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Paciente _iter27 : struct.success)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class consultarPacientes_resultTupleSchemeFactory implements SchemeFactory {
      public consultarPacientes_resultTupleScheme getScheme() {
        return new consultarPacientes_resultTupleScheme();
      }
    }

    private static class consultarPacientes_resultTupleScheme extends TupleScheme<consultarPacientes_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, consultarPacientes_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Paciente _iter28 : struct.success)
            {
              _iter28.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, consultarPacientes_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Paciente>(_list29.size);
            for (int _i30 = 0; _i30 < _list29.size; ++_i30)
            {
              Paciente _elem31;
              _elem31 = new Paciente();
              _elem31.read(iprot);
              struct.success.add(_elem31);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class consultarSeRealiza_args implements org.apache.thrift.TBase<consultarSeRealiza_args, consultarSeRealiza_args._Fields>, java.io.Serializable, Cloneable, Comparable<consultarSeRealiza_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("consultarSeRealiza_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new consultarSeRealiza_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new consultarSeRealiza_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(consultarSeRealiza_args.class, metaDataMap);
    }

    public consultarSeRealiza_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public consultarSeRealiza_args(consultarSeRealiza_args other) {
    }

    public consultarSeRealiza_args deepCopy() {
      return new consultarSeRealiza_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof consultarSeRealiza_args)
        return this.equals((consultarSeRealiza_args)that);
      return false;
    }

    public boolean equals(consultarSeRealiza_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(consultarSeRealiza_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("consultarSeRealiza_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class consultarSeRealiza_argsStandardSchemeFactory implements SchemeFactory {
      public consultarSeRealiza_argsStandardScheme getScheme() {
        return new consultarSeRealiza_argsStandardScheme();
      }
    }

    private static class consultarSeRealiza_argsStandardScheme extends StandardScheme<consultarSeRealiza_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, consultarSeRealiza_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, consultarSeRealiza_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class consultarSeRealiza_argsTupleSchemeFactory implements SchemeFactory {
      public consultarSeRealiza_argsTupleScheme getScheme() {
        return new consultarSeRealiza_argsTupleScheme();
      }
    }

    private static class consultarSeRealiza_argsTupleScheme extends TupleScheme<consultarSeRealiza_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, consultarSeRealiza_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, consultarSeRealiza_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class consultarSeRealiza_result implements org.apache.thrift.TBase<consultarSeRealiza_result, consultarSeRealiza_result._Fields>, java.io.Serializable, Cloneable, Comparable<consultarSeRealiza_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("consultarSeRealiza_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new consultarSeRealiza_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new consultarSeRealiza_resultTupleSchemeFactory());
    }

    public List<SeRealiza> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SeRealiza.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(consultarSeRealiza_result.class, metaDataMap);
    }

    public consultarSeRealiza_result() {
    }

    public consultarSeRealiza_result(
      List<SeRealiza> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public consultarSeRealiza_result(consultarSeRealiza_result other) {
      if (other.isSetSuccess()) {
        List<SeRealiza> __this__success = new ArrayList<SeRealiza>(other.success.size());
        for (SeRealiza other_element : other.success) {
          __this__success.add(new SeRealiza(other_element));
        }
        this.success = __this__success;
      }
    }

    public consultarSeRealiza_result deepCopy() {
      return new consultarSeRealiza_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<SeRealiza> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(SeRealiza elem) {
      if (this.success == null) {
        this.success = new ArrayList<SeRealiza>();
      }
      this.success.add(elem);
    }

    public List<SeRealiza> getSuccess() {
      return this.success;
    }

    public consultarSeRealiza_result setSuccess(List<SeRealiza> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<SeRealiza>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof consultarSeRealiza_result)
        return this.equals((consultarSeRealiza_result)that);
      return false;
    }

    public boolean equals(consultarSeRealiza_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(consultarSeRealiza_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("consultarSeRealiza_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class consultarSeRealiza_resultStandardSchemeFactory implements SchemeFactory {
      public consultarSeRealiza_resultStandardScheme getScheme() {
        return new consultarSeRealiza_resultStandardScheme();
      }
    }

    private static class consultarSeRealiza_resultStandardScheme extends StandardScheme<consultarSeRealiza_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, consultarSeRealiza_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.success = new ArrayList<SeRealiza>(_list32.size);
                  for (int _i33 = 0; _i33 < _list32.size; ++_i33)
                  {
                    SeRealiza _elem34;
                    _elem34 = new SeRealiza();
                    _elem34.read(iprot);
                    struct.success.add(_elem34);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, consultarSeRealiza_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (SeRealiza _iter35 : struct.success)
            {
              _iter35.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class consultarSeRealiza_resultTupleSchemeFactory implements SchemeFactory {
      public consultarSeRealiza_resultTupleScheme getScheme() {
        return new consultarSeRealiza_resultTupleScheme();
      }
    }

    private static class consultarSeRealiza_resultTupleScheme extends TupleScheme<consultarSeRealiza_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, consultarSeRealiza_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (SeRealiza _iter36 : struct.success)
            {
              _iter36.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, consultarSeRealiza_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<SeRealiza>(_list37.size);
            for (int _i38 = 0; _i38 < _list37.size; ++_i38)
            {
              SeRealiza _elem39;
              _elem39 = new SeRealiza();
              _elem39.read(iprot);
              struct.success.add(_elem39);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class consultarAnalisisClave_args implements org.apache.thrift.TBase<consultarAnalisisClave_args, consultarAnalisisClave_args._Fields>, java.io.Serializable, Cloneable, Comparable<consultarAnalisisClave_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("consultarAnalisisClave_args");

    private static final org.apache.thrift.protocol.TField CLAVE_FIELD_DESC = new org.apache.thrift.protocol.TField("clave", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new consultarAnalisisClave_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new consultarAnalisisClave_argsTupleSchemeFactory());
    }

    public String clave; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLAVE((short)1, "clave");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLAVE
            return CLAVE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLAVE, new org.apache.thrift.meta_data.FieldMetaData("clave", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(consultarAnalisisClave_args.class, metaDataMap);
    }

    public consultarAnalisisClave_args() {
    }

    public consultarAnalisisClave_args(
      String clave)
    {
      this();
      this.clave = clave;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public consultarAnalisisClave_args(consultarAnalisisClave_args other) {
      if (other.isSetClave()) {
        this.clave = other.clave;
      }
    }

    public consultarAnalisisClave_args deepCopy() {
      return new consultarAnalisisClave_args(this);
    }

    @Override
    public void clear() {
      this.clave = null;
    }

    public String getClave() {
      return this.clave;
    }

    public consultarAnalisisClave_args setClave(String clave) {
      this.clave = clave;
      return this;
    }

    public void unsetClave() {
      this.clave = null;
    }

    /** Returns true if field clave is set (has been assigned a value) and false otherwise */
    public boolean isSetClave() {
      return this.clave != null;
    }

    public void setClaveIsSet(boolean value) {
      if (!value) {
        this.clave = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLAVE:
        if (value == null) {
          unsetClave();
        } else {
          setClave((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLAVE:
        return getClave();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLAVE:
        return isSetClave();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof consultarAnalisisClave_args)
        return this.equals((consultarAnalisisClave_args)that);
      return false;
    }

    public boolean equals(consultarAnalisisClave_args that) {
      if (that == null)
        return false;

      boolean this_present_clave = true && this.isSetClave();
      boolean that_present_clave = true && that.isSetClave();
      if (this_present_clave || that_present_clave) {
        if (!(this_present_clave && that_present_clave))
          return false;
        if (!this.clave.equals(that.clave))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(consultarAnalisisClave_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClave()).compareTo(other.isSetClave());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClave()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clave, other.clave);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("consultarAnalisisClave_args(");
      boolean first = true;

      sb.append("clave:");
      if (this.clave == null) {
        sb.append("null");
      } else {
        sb.append(this.clave);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class consultarAnalisisClave_argsStandardSchemeFactory implements SchemeFactory {
      public consultarAnalisisClave_argsStandardScheme getScheme() {
        return new consultarAnalisisClave_argsStandardScheme();
      }
    }

    private static class consultarAnalisisClave_argsStandardScheme extends StandardScheme<consultarAnalisisClave_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, consultarAnalisisClave_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLAVE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clave = iprot.readString();
                struct.setClaveIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, consultarAnalisisClave_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clave != null) {
          oprot.writeFieldBegin(CLAVE_FIELD_DESC);
          oprot.writeString(struct.clave);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class consultarAnalisisClave_argsTupleSchemeFactory implements SchemeFactory {
      public consultarAnalisisClave_argsTupleScheme getScheme() {
        return new consultarAnalisisClave_argsTupleScheme();
      }
    }

    private static class consultarAnalisisClave_argsTupleScheme extends TupleScheme<consultarAnalisisClave_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, consultarAnalisisClave_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClave()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetClave()) {
          oprot.writeString(struct.clave);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, consultarAnalisisClave_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.clave = iprot.readString();
          struct.setClaveIsSet(true);
        }
      }
    }

  }

  public static class consultarAnalisisClave_result implements org.apache.thrift.TBase<consultarAnalisisClave_result, consultarAnalisisClave_result._Fields>, java.io.Serializable, Cloneable, Comparable<consultarAnalisisClave_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("consultarAnalisisClave_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new consultarAnalisisClave_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new consultarAnalisisClave_resultTupleSchemeFactory());
    }

    public AnalisisClinico success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AnalisisClinico.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(consultarAnalisisClave_result.class, metaDataMap);
    }

    public consultarAnalisisClave_result() {
    }

    public consultarAnalisisClave_result(
      AnalisisClinico success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public consultarAnalisisClave_result(consultarAnalisisClave_result other) {
      if (other.isSetSuccess()) {
        this.success = new AnalisisClinico(other.success);
      }
    }

    public consultarAnalisisClave_result deepCopy() {
      return new consultarAnalisisClave_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public AnalisisClinico getSuccess() {
      return this.success;
    }

    public consultarAnalisisClave_result setSuccess(AnalisisClinico success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((AnalisisClinico)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof consultarAnalisisClave_result)
        return this.equals((consultarAnalisisClave_result)that);
      return false;
    }

    public boolean equals(consultarAnalisisClave_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(consultarAnalisisClave_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("consultarAnalisisClave_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class consultarAnalisisClave_resultStandardSchemeFactory implements SchemeFactory {
      public consultarAnalisisClave_resultStandardScheme getScheme() {
        return new consultarAnalisisClave_resultStandardScheme();
      }
    }

    private static class consultarAnalisisClave_resultStandardScheme extends StandardScheme<consultarAnalisisClave_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, consultarAnalisisClave_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new AnalisisClinico();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, consultarAnalisisClave_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class consultarAnalisisClave_resultTupleSchemeFactory implements SchemeFactory {
      public consultarAnalisisClave_resultTupleScheme getScheme() {
        return new consultarAnalisisClave_resultTupleScheme();
      }
    }

    private static class consultarAnalisisClave_resultTupleScheme extends TupleScheme<consultarAnalisisClave_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, consultarAnalisisClave_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, consultarAnalisisClave_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new AnalisisClinico();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class consultarPacienteClave_args implements org.apache.thrift.TBase<consultarPacienteClave_args, consultarPacienteClave_args._Fields>, java.io.Serializable, Cloneable, Comparable<consultarPacienteClave_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("consultarPacienteClave_args");

    private static final org.apache.thrift.protocol.TField CLAVE_FIELD_DESC = new org.apache.thrift.protocol.TField("clave", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new consultarPacienteClave_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new consultarPacienteClave_argsTupleSchemeFactory());
    }

    public String clave; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLAVE((short)1, "clave");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLAVE
            return CLAVE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLAVE, new org.apache.thrift.meta_data.FieldMetaData("clave", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(consultarPacienteClave_args.class, metaDataMap);
    }

    public consultarPacienteClave_args() {
    }

    public consultarPacienteClave_args(
      String clave)
    {
      this();
      this.clave = clave;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public consultarPacienteClave_args(consultarPacienteClave_args other) {
      if (other.isSetClave()) {
        this.clave = other.clave;
      }
    }

    public consultarPacienteClave_args deepCopy() {
      return new consultarPacienteClave_args(this);
    }

    @Override
    public void clear() {
      this.clave = null;
    }

    public String getClave() {
      return this.clave;
    }

    public consultarPacienteClave_args setClave(String clave) {
      this.clave = clave;
      return this;
    }

    public void unsetClave() {
      this.clave = null;
    }

    /** Returns true if field clave is set (has been assigned a value) and false otherwise */
    public boolean isSetClave() {
      return this.clave != null;
    }

    public void setClaveIsSet(boolean value) {
      if (!value) {
        this.clave = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLAVE:
        if (value == null) {
          unsetClave();
        } else {
          setClave((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLAVE:
        return getClave();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLAVE:
        return isSetClave();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof consultarPacienteClave_args)
        return this.equals((consultarPacienteClave_args)that);
      return false;
    }

    public boolean equals(consultarPacienteClave_args that) {
      if (that == null)
        return false;

      boolean this_present_clave = true && this.isSetClave();
      boolean that_present_clave = true && that.isSetClave();
      if (this_present_clave || that_present_clave) {
        if (!(this_present_clave && that_present_clave))
          return false;
        if (!this.clave.equals(that.clave))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(consultarPacienteClave_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClave()).compareTo(other.isSetClave());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClave()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clave, other.clave);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("consultarPacienteClave_args(");
      boolean first = true;

      sb.append("clave:");
      if (this.clave == null) {
        sb.append("null");
      } else {
        sb.append(this.clave);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class consultarPacienteClave_argsStandardSchemeFactory implements SchemeFactory {
      public consultarPacienteClave_argsStandardScheme getScheme() {
        return new consultarPacienteClave_argsStandardScheme();
      }
    }

    private static class consultarPacienteClave_argsStandardScheme extends StandardScheme<consultarPacienteClave_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, consultarPacienteClave_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLAVE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clave = iprot.readString();
                struct.setClaveIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, consultarPacienteClave_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clave != null) {
          oprot.writeFieldBegin(CLAVE_FIELD_DESC);
          oprot.writeString(struct.clave);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class consultarPacienteClave_argsTupleSchemeFactory implements SchemeFactory {
      public consultarPacienteClave_argsTupleScheme getScheme() {
        return new consultarPacienteClave_argsTupleScheme();
      }
    }

    private static class consultarPacienteClave_argsTupleScheme extends TupleScheme<consultarPacienteClave_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, consultarPacienteClave_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClave()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetClave()) {
          oprot.writeString(struct.clave);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, consultarPacienteClave_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.clave = iprot.readString();
          struct.setClaveIsSet(true);
        }
      }
    }

  }

  public static class consultarPacienteClave_result implements org.apache.thrift.TBase<consultarPacienteClave_result, consultarPacienteClave_result._Fields>, java.io.Serializable, Cloneable, Comparable<consultarPacienteClave_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("consultarPacienteClave_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new consultarPacienteClave_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new consultarPacienteClave_resultTupleSchemeFactory());
    }

    public Paciente success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Paciente.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(consultarPacienteClave_result.class, metaDataMap);
    }

    public consultarPacienteClave_result() {
    }

    public consultarPacienteClave_result(
      Paciente success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public consultarPacienteClave_result(consultarPacienteClave_result other) {
      if (other.isSetSuccess()) {
        this.success = new Paciente(other.success);
      }
    }

    public consultarPacienteClave_result deepCopy() {
      return new consultarPacienteClave_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Paciente getSuccess() {
      return this.success;
    }

    public consultarPacienteClave_result setSuccess(Paciente success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Paciente)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof consultarPacienteClave_result)
        return this.equals((consultarPacienteClave_result)that);
      return false;
    }

    public boolean equals(consultarPacienteClave_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(consultarPacienteClave_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("consultarPacienteClave_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class consultarPacienteClave_resultStandardSchemeFactory implements SchemeFactory {
      public consultarPacienteClave_resultStandardScheme getScheme() {
        return new consultarPacienteClave_resultStandardScheme();
      }
    }

    private static class consultarPacienteClave_resultStandardScheme extends StandardScheme<consultarPacienteClave_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, consultarPacienteClave_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Paciente();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, consultarPacienteClave_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class consultarPacienteClave_resultTupleSchemeFactory implements SchemeFactory {
      public consultarPacienteClave_resultTupleScheme getScheme() {
        return new consultarPacienteClave_resultTupleScheme();
      }
    }

    private static class consultarPacienteClave_resultTupleScheme extends TupleScheme<consultarPacienteClave_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, consultarPacienteClave_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, consultarPacienteClave_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Paciente();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class consultarDoctorClave_args implements org.apache.thrift.TBase<consultarDoctorClave_args, consultarDoctorClave_args._Fields>, java.io.Serializable, Cloneable, Comparable<consultarDoctorClave_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("consultarDoctorClave_args");

    private static final org.apache.thrift.protocol.TField CLAVE_FIELD_DESC = new org.apache.thrift.protocol.TField("clave", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new consultarDoctorClave_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new consultarDoctorClave_argsTupleSchemeFactory());
    }

    public String clave; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLAVE((short)1, "clave");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLAVE
            return CLAVE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLAVE, new org.apache.thrift.meta_data.FieldMetaData("clave", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(consultarDoctorClave_args.class, metaDataMap);
    }

    public consultarDoctorClave_args() {
    }

    public consultarDoctorClave_args(
      String clave)
    {
      this();
      this.clave = clave;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public consultarDoctorClave_args(consultarDoctorClave_args other) {
      if (other.isSetClave()) {
        this.clave = other.clave;
      }
    }

    public consultarDoctorClave_args deepCopy() {
      return new consultarDoctorClave_args(this);
    }

    @Override
    public void clear() {
      this.clave = null;
    }

    public String getClave() {
      return this.clave;
    }

    public consultarDoctorClave_args setClave(String clave) {
      this.clave = clave;
      return this;
    }

    public void unsetClave() {
      this.clave = null;
    }

    /** Returns true if field clave is set (has been assigned a value) and false otherwise */
    public boolean isSetClave() {
      return this.clave != null;
    }

    public void setClaveIsSet(boolean value) {
      if (!value) {
        this.clave = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLAVE:
        if (value == null) {
          unsetClave();
        } else {
          setClave((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLAVE:
        return getClave();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLAVE:
        return isSetClave();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof consultarDoctorClave_args)
        return this.equals((consultarDoctorClave_args)that);
      return false;
    }

    public boolean equals(consultarDoctorClave_args that) {
      if (that == null)
        return false;

      boolean this_present_clave = true && this.isSetClave();
      boolean that_present_clave = true && that.isSetClave();
      if (this_present_clave || that_present_clave) {
        if (!(this_present_clave && that_present_clave))
          return false;
        if (!this.clave.equals(that.clave))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(consultarDoctorClave_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClave()).compareTo(other.isSetClave());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClave()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clave, other.clave);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("consultarDoctorClave_args(");
      boolean first = true;

      sb.append("clave:");
      if (this.clave == null) {
        sb.append("null");
      } else {
        sb.append(this.clave);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class consultarDoctorClave_argsStandardSchemeFactory implements SchemeFactory {
      public consultarDoctorClave_argsStandardScheme getScheme() {
        return new consultarDoctorClave_argsStandardScheme();
      }
    }

    private static class consultarDoctorClave_argsStandardScheme extends StandardScheme<consultarDoctorClave_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, consultarDoctorClave_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLAVE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clave = iprot.readString();
                struct.setClaveIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, consultarDoctorClave_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clave != null) {
          oprot.writeFieldBegin(CLAVE_FIELD_DESC);
          oprot.writeString(struct.clave);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class consultarDoctorClave_argsTupleSchemeFactory implements SchemeFactory {
      public consultarDoctorClave_argsTupleScheme getScheme() {
        return new consultarDoctorClave_argsTupleScheme();
      }
    }

    private static class consultarDoctorClave_argsTupleScheme extends TupleScheme<consultarDoctorClave_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, consultarDoctorClave_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClave()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetClave()) {
          oprot.writeString(struct.clave);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, consultarDoctorClave_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.clave = iprot.readString();
          struct.setClaveIsSet(true);
        }
      }
    }

  }

  public static class consultarDoctorClave_result implements org.apache.thrift.TBase<consultarDoctorClave_result, consultarDoctorClave_result._Fields>, java.io.Serializable, Cloneable, Comparable<consultarDoctorClave_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("consultarDoctorClave_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new consultarDoctorClave_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new consultarDoctorClave_resultTupleSchemeFactory());
    }

    public Doctor success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Doctor.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(consultarDoctorClave_result.class, metaDataMap);
    }

    public consultarDoctorClave_result() {
    }

    public consultarDoctorClave_result(
      Doctor success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public consultarDoctorClave_result(consultarDoctorClave_result other) {
      if (other.isSetSuccess()) {
        this.success = new Doctor(other.success);
      }
    }

    public consultarDoctorClave_result deepCopy() {
      return new consultarDoctorClave_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Doctor getSuccess() {
      return this.success;
    }

    public consultarDoctorClave_result setSuccess(Doctor success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Doctor)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof consultarDoctorClave_result)
        return this.equals((consultarDoctorClave_result)that);
      return false;
    }

    public boolean equals(consultarDoctorClave_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(consultarDoctorClave_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("consultarDoctorClave_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class consultarDoctorClave_resultStandardSchemeFactory implements SchemeFactory {
      public consultarDoctorClave_resultStandardScheme getScheme() {
        return new consultarDoctorClave_resultStandardScheme();
      }
    }

    private static class consultarDoctorClave_resultStandardScheme extends StandardScheme<consultarDoctorClave_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, consultarDoctorClave_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Doctor();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, consultarDoctorClave_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class consultarDoctorClave_resultTupleSchemeFactory implements SchemeFactory {
      public consultarDoctorClave_resultTupleScheme getScheme() {
        return new consultarDoctorClave_resultTupleScheme();
      }
    }

    private static class consultarDoctorClave_resultTupleScheme extends TupleScheme<consultarDoctorClave_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, consultarDoctorClave_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, consultarDoctorClave_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Doctor();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class consultarAnalisisTipo_args implements org.apache.thrift.TBase<consultarAnalisisTipo_args, consultarAnalisisTipo_args._Fields>, java.io.Serializable, Cloneable, Comparable<consultarAnalisisTipo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("consultarAnalisisTipo_args");

    private static final org.apache.thrift.protocol.TField TIPO_FIELD_DESC = new org.apache.thrift.protocol.TField("tipo", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new consultarAnalisisTipo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new consultarAnalisisTipo_argsTupleSchemeFactory());
    }

    public String tipo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TIPO((short)1, "tipo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TIPO
            return TIPO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TIPO, new org.apache.thrift.meta_data.FieldMetaData("tipo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(consultarAnalisisTipo_args.class, metaDataMap);
    }

    public consultarAnalisisTipo_args() {
    }

    public consultarAnalisisTipo_args(
      String tipo)
    {
      this();
      this.tipo = tipo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public consultarAnalisisTipo_args(consultarAnalisisTipo_args other) {
      if (other.isSetTipo()) {
        this.tipo = other.tipo;
      }
    }

    public consultarAnalisisTipo_args deepCopy() {
      return new consultarAnalisisTipo_args(this);
    }

    @Override
    public void clear() {
      this.tipo = null;
    }

    public String getTipo() {
      return this.tipo;
    }

    public consultarAnalisisTipo_args setTipo(String tipo) {
      this.tipo = tipo;
      return this;
    }

    public void unsetTipo() {
      this.tipo = null;
    }

    /** Returns true if field tipo is set (has been assigned a value) and false otherwise */
    public boolean isSetTipo() {
      return this.tipo != null;
    }

    public void setTipoIsSet(boolean value) {
      if (!value) {
        this.tipo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TIPO:
        if (value == null) {
          unsetTipo();
        } else {
          setTipo((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TIPO:
        return getTipo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TIPO:
        return isSetTipo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof consultarAnalisisTipo_args)
        return this.equals((consultarAnalisisTipo_args)that);
      return false;
    }

    public boolean equals(consultarAnalisisTipo_args that) {
      if (that == null)
        return false;

      boolean this_present_tipo = true && this.isSetTipo();
      boolean that_present_tipo = true && that.isSetTipo();
      if (this_present_tipo || that_present_tipo) {
        if (!(this_present_tipo && that_present_tipo))
          return false;
        if (!this.tipo.equals(that.tipo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(consultarAnalisisTipo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTipo()).compareTo(other.isSetTipo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTipo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tipo, other.tipo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("consultarAnalisisTipo_args(");
      boolean first = true;

      sb.append("tipo:");
      if (this.tipo == null) {
        sb.append("null");
      } else {
        sb.append(this.tipo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class consultarAnalisisTipo_argsStandardSchemeFactory implements SchemeFactory {
      public consultarAnalisisTipo_argsStandardScheme getScheme() {
        return new consultarAnalisisTipo_argsStandardScheme();
      }
    }

    private static class consultarAnalisisTipo_argsStandardScheme extends StandardScheme<consultarAnalisisTipo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, consultarAnalisisTipo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TIPO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tipo = iprot.readString();
                struct.setTipoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, consultarAnalisisTipo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tipo != null) {
          oprot.writeFieldBegin(TIPO_FIELD_DESC);
          oprot.writeString(struct.tipo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class consultarAnalisisTipo_argsTupleSchemeFactory implements SchemeFactory {
      public consultarAnalisisTipo_argsTupleScheme getScheme() {
        return new consultarAnalisisTipo_argsTupleScheme();
      }
    }

    private static class consultarAnalisisTipo_argsTupleScheme extends TupleScheme<consultarAnalisisTipo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, consultarAnalisisTipo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTipo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTipo()) {
          oprot.writeString(struct.tipo);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, consultarAnalisisTipo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.tipo = iprot.readString();
          struct.setTipoIsSet(true);
        }
      }
    }

  }

  public static class consultarAnalisisTipo_result implements org.apache.thrift.TBase<consultarAnalisisTipo_result, consultarAnalisisTipo_result._Fields>, java.io.Serializable, Cloneable, Comparable<consultarAnalisisTipo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("consultarAnalisisTipo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new consultarAnalisisTipo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new consultarAnalisisTipo_resultTupleSchemeFactory());
    }

    public List<AnalisisClinico> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AnalisisClinico.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(consultarAnalisisTipo_result.class, metaDataMap);
    }

    public consultarAnalisisTipo_result() {
    }

    public consultarAnalisisTipo_result(
      List<AnalisisClinico> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public consultarAnalisisTipo_result(consultarAnalisisTipo_result other) {
      if (other.isSetSuccess()) {
        List<AnalisisClinico> __this__success = new ArrayList<AnalisisClinico>(other.success.size());
        for (AnalisisClinico other_element : other.success) {
          __this__success.add(new AnalisisClinico(other_element));
        }
        this.success = __this__success;
      }
    }

    public consultarAnalisisTipo_result deepCopy() {
      return new consultarAnalisisTipo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<AnalisisClinico> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(AnalisisClinico elem) {
      if (this.success == null) {
        this.success = new ArrayList<AnalisisClinico>();
      }
      this.success.add(elem);
    }

    public List<AnalisisClinico> getSuccess() {
      return this.success;
    }

    public consultarAnalisisTipo_result setSuccess(List<AnalisisClinico> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<AnalisisClinico>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof consultarAnalisisTipo_result)
        return this.equals((consultarAnalisisTipo_result)that);
      return false;
    }

    public boolean equals(consultarAnalisisTipo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(consultarAnalisisTipo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("consultarAnalisisTipo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class consultarAnalisisTipo_resultStandardSchemeFactory implements SchemeFactory {
      public consultarAnalisisTipo_resultStandardScheme getScheme() {
        return new consultarAnalisisTipo_resultStandardScheme();
      }
    }

    private static class consultarAnalisisTipo_resultStandardScheme extends StandardScheme<consultarAnalisisTipo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, consultarAnalisisTipo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                  struct.success = new ArrayList<AnalisisClinico>(_list40.size);
                  for (int _i41 = 0; _i41 < _list40.size; ++_i41)
                  {
                    AnalisisClinico _elem42;
                    _elem42 = new AnalisisClinico();
                    _elem42.read(iprot);
                    struct.success.add(_elem42);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, consultarAnalisisTipo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (AnalisisClinico _iter43 : struct.success)
            {
              _iter43.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class consultarAnalisisTipo_resultTupleSchemeFactory implements SchemeFactory {
      public consultarAnalisisTipo_resultTupleScheme getScheme() {
        return new consultarAnalisisTipo_resultTupleScheme();
      }
    }

    private static class consultarAnalisisTipo_resultTupleScheme extends TupleScheme<consultarAnalisisTipo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, consultarAnalisisTipo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (AnalisisClinico _iter44 : struct.success)
            {
              _iter44.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, consultarAnalisisTipo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<AnalisisClinico>(_list45.size);
            for (int _i46 = 0; _i46 < _list45.size; ++_i46)
            {
              AnalisisClinico _elem47;
              _elem47 = new AnalisisClinico();
              _elem47.read(iprot);
              struct.success.add(_elem47);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class consultarDoctoresEspecialidad_args implements org.apache.thrift.TBase<consultarDoctoresEspecialidad_args, consultarDoctoresEspecialidad_args._Fields>, java.io.Serializable, Cloneable, Comparable<consultarDoctoresEspecialidad_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("consultarDoctoresEspecialidad_args");

    private static final org.apache.thrift.protocol.TField ESPECIALIDAD_FIELD_DESC = new org.apache.thrift.protocol.TField("especialidad", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new consultarDoctoresEspecialidad_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new consultarDoctoresEspecialidad_argsTupleSchemeFactory());
    }

    public String especialidad; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ESPECIALIDAD((short)1, "especialidad");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ESPECIALIDAD
            return ESPECIALIDAD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ESPECIALIDAD, new org.apache.thrift.meta_data.FieldMetaData("especialidad", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(consultarDoctoresEspecialidad_args.class, metaDataMap);
    }

    public consultarDoctoresEspecialidad_args() {
    }

    public consultarDoctoresEspecialidad_args(
      String especialidad)
    {
      this();
      this.especialidad = especialidad;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public consultarDoctoresEspecialidad_args(consultarDoctoresEspecialidad_args other) {
      if (other.isSetEspecialidad()) {
        this.especialidad = other.especialidad;
      }
    }

    public consultarDoctoresEspecialidad_args deepCopy() {
      return new consultarDoctoresEspecialidad_args(this);
    }

    @Override
    public void clear() {
      this.especialidad = null;
    }

    public String getEspecialidad() {
      return this.especialidad;
    }

    public consultarDoctoresEspecialidad_args setEspecialidad(String especialidad) {
      this.especialidad = especialidad;
      return this;
    }

    public void unsetEspecialidad() {
      this.especialidad = null;
    }

    /** Returns true if field especialidad is set (has been assigned a value) and false otherwise */
    public boolean isSetEspecialidad() {
      return this.especialidad != null;
    }

    public void setEspecialidadIsSet(boolean value) {
      if (!value) {
        this.especialidad = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ESPECIALIDAD:
        if (value == null) {
          unsetEspecialidad();
        } else {
          setEspecialidad((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ESPECIALIDAD:
        return getEspecialidad();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ESPECIALIDAD:
        return isSetEspecialidad();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof consultarDoctoresEspecialidad_args)
        return this.equals((consultarDoctoresEspecialidad_args)that);
      return false;
    }

    public boolean equals(consultarDoctoresEspecialidad_args that) {
      if (that == null)
        return false;

      boolean this_present_especialidad = true && this.isSetEspecialidad();
      boolean that_present_especialidad = true && that.isSetEspecialidad();
      if (this_present_especialidad || that_present_especialidad) {
        if (!(this_present_especialidad && that_present_especialidad))
          return false;
        if (!this.especialidad.equals(that.especialidad))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(consultarDoctoresEspecialidad_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEspecialidad()).compareTo(other.isSetEspecialidad());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEspecialidad()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.especialidad, other.especialidad);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("consultarDoctoresEspecialidad_args(");
      boolean first = true;

      sb.append("especialidad:");
      if (this.especialidad == null) {
        sb.append("null");
      } else {
        sb.append(this.especialidad);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class consultarDoctoresEspecialidad_argsStandardSchemeFactory implements SchemeFactory {
      public consultarDoctoresEspecialidad_argsStandardScheme getScheme() {
        return new consultarDoctoresEspecialidad_argsStandardScheme();
      }
    }

    private static class consultarDoctoresEspecialidad_argsStandardScheme extends StandardScheme<consultarDoctoresEspecialidad_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, consultarDoctoresEspecialidad_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ESPECIALIDAD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.especialidad = iprot.readString();
                struct.setEspecialidadIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, consultarDoctoresEspecialidad_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.especialidad != null) {
          oprot.writeFieldBegin(ESPECIALIDAD_FIELD_DESC);
          oprot.writeString(struct.especialidad);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class consultarDoctoresEspecialidad_argsTupleSchemeFactory implements SchemeFactory {
      public consultarDoctoresEspecialidad_argsTupleScheme getScheme() {
        return new consultarDoctoresEspecialidad_argsTupleScheme();
      }
    }

    private static class consultarDoctoresEspecialidad_argsTupleScheme extends TupleScheme<consultarDoctoresEspecialidad_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, consultarDoctoresEspecialidad_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEspecialidad()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEspecialidad()) {
          oprot.writeString(struct.especialidad);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, consultarDoctoresEspecialidad_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.especialidad = iprot.readString();
          struct.setEspecialidadIsSet(true);
        }
      }
    }

  }

  public static class consultarDoctoresEspecialidad_result implements org.apache.thrift.TBase<consultarDoctoresEspecialidad_result, consultarDoctoresEspecialidad_result._Fields>, java.io.Serializable, Cloneable, Comparable<consultarDoctoresEspecialidad_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("consultarDoctoresEspecialidad_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new consultarDoctoresEspecialidad_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new consultarDoctoresEspecialidad_resultTupleSchemeFactory());
    }

    public List<Doctor> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Doctor.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(consultarDoctoresEspecialidad_result.class, metaDataMap);
    }

    public consultarDoctoresEspecialidad_result() {
    }

    public consultarDoctoresEspecialidad_result(
      List<Doctor> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public consultarDoctoresEspecialidad_result(consultarDoctoresEspecialidad_result other) {
      if (other.isSetSuccess()) {
        List<Doctor> __this__success = new ArrayList<Doctor>(other.success.size());
        for (Doctor other_element : other.success) {
          __this__success.add(new Doctor(other_element));
        }
        this.success = __this__success;
      }
    }

    public consultarDoctoresEspecialidad_result deepCopy() {
      return new consultarDoctoresEspecialidad_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Doctor> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Doctor elem) {
      if (this.success == null) {
        this.success = new ArrayList<Doctor>();
      }
      this.success.add(elem);
    }

    public List<Doctor> getSuccess() {
      return this.success;
    }

    public consultarDoctoresEspecialidad_result setSuccess(List<Doctor> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Doctor>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof consultarDoctoresEspecialidad_result)
        return this.equals((consultarDoctoresEspecialidad_result)that);
      return false;
    }

    public boolean equals(consultarDoctoresEspecialidad_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(consultarDoctoresEspecialidad_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("consultarDoctoresEspecialidad_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class consultarDoctoresEspecialidad_resultStandardSchemeFactory implements SchemeFactory {
      public consultarDoctoresEspecialidad_resultStandardScheme getScheme() {
        return new consultarDoctoresEspecialidad_resultStandardScheme();
      }
    }

    private static class consultarDoctoresEspecialidad_resultStandardScheme extends StandardScheme<consultarDoctoresEspecialidad_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, consultarDoctoresEspecialidad_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                  struct.success = new ArrayList<Doctor>(_list48.size);
                  for (int _i49 = 0; _i49 < _list48.size; ++_i49)
                  {
                    Doctor _elem50;
                    _elem50 = new Doctor();
                    _elem50.read(iprot);
                    struct.success.add(_elem50);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, consultarDoctoresEspecialidad_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Doctor _iter51 : struct.success)
            {
              _iter51.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class consultarDoctoresEspecialidad_resultTupleSchemeFactory implements SchemeFactory {
      public consultarDoctoresEspecialidad_resultTupleScheme getScheme() {
        return new consultarDoctoresEspecialidad_resultTupleScheme();
      }
    }

    private static class consultarDoctoresEspecialidad_resultTupleScheme extends TupleScheme<consultarDoctoresEspecialidad_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, consultarDoctoresEspecialidad_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Doctor _iter52 : struct.success)
            {
              _iter52.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, consultarDoctoresEspecialidad_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Doctor>(_list53.size);
            for (int _i54 = 0; _i54 < _list53.size; ++_i54)
            {
              Doctor _elem55;
              _elem55 = new Doctor();
              _elem55.read(iprot);
              struct.success.add(_elem55);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class generarReporteAnalisisPaciente_args implements org.apache.thrift.TBase<generarReporteAnalisisPaciente_args, generarReporteAnalisisPaciente_args._Fields>, java.io.Serializable, Cloneable, Comparable<generarReporteAnalisisPaciente_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("generarReporteAnalisisPaciente_args");

    private static final org.apache.thrift.protocol.TField CLAVE_PACIENTE_FIELD_DESC = new org.apache.thrift.protocol.TField("clavePaciente", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new generarReporteAnalisisPaciente_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new generarReporteAnalisisPaciente_argsTupleSchemeFactory());
    }

    public String clavePaciente; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLAVE_PACIENTE((short)1, "clavePaciente");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLAVE_PACIENTE
            return CLAVE_PACIENTE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLAVE_PACIENTE, new org.apache.thrift.meta_data.FieldMetaData("clavePaciente", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(generarReporteAnalisisPaciente_args.class, metaDataMap);
    }

    public generarReporteAnalisisPaciente_args() {
    }

    public generarReporteAnalisisPaciente_args(
      String clavePaciente)
    {
      this();
      this.clavePaciente = clavePaciente;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public generarReporteAnalisisPaciente_args(generarReporteAnalisisPaciente_args other) {
      if (other.isSetClavePaciente()) {
        this.clavePaciente = other.clavePaciente;
      }
    }

    public generarReporteAnalisisPaciente_args deepCopy() {
      return new generarReporteAnalisisPaciente_args(this);
    }

    @Override
    public void clear() {
      this.clavePaciente = null;
    }

    public String getClavePaciente() {
      return this.clavePaciente;
    }

    public generarReporteAnalisisPaciente_args setClavePaciente(String clavePaciente) {
      this.clavePaciente = clavePaciente;
      return this;
    }

    public void unsetClavePaciente() {
      this.clavePaciente = null;
    }

    /** Returns true if field clavePaciente is set (has been assigned a value) and false otherwise */
    public boolean isSetClavePaciente() {
      return this.clavePaciente != null;
    }

    public void setClavePacienteIsSet(boolean value) {
      if (!value) {
        this.clavePaciente = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLAVE_PACIENTE:
        if (value == null) {
          unsetClavePaciente();
        } else {
          setClavePaciente((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLAVE_PACIENTE:
        return getClavePaciente();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLAVE_PACIENTE:
        return isSetClavePaciente();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof generarReporteAnalisisPaciente_args)
        return this.equals((generarReporteAnalisisPaciente_args)that);
      return false;
    }

    public boolean equals(generarReporteAnalisisPaciente_args that) {
      if (that == null)
        return false;

      boolean this_present_clavePaciente = true && this.isSetClavePaciente();
      boolean that_present_clavePaciente = true && that.isSetClavePaciente();
      if (this_present_clavePaciente || that_present_clavePaciente) {
        if (!(this_present_clavePaciente && that_present_clavePaciente))
          return false;
        if (!this.clavePaciente.equals(that.clavePaciente))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(generarReporteAnalisisPaciente_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClavePaciente()).compareTo(other.isSetClavePaciente());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClavePaciente()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clavePaciente, other.clavePaciente);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("generarReporteAnalisisPaciente_args(");
      boolean first = true;

      sb.append("clavePaciente:");
      if (this.clavePaciente == null) {
        sb.append("null");
      } else {
        sb.append(this.clavePaciente);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class generarReporteAnalisisPaciente_argsStandardSchemeFactory implements SchemeFactory {
      public generarReporteAnalisisPaciente_argsStandardScheme getScheme() {
        return new generarReporteAnalisisPaciente_argsStandardScheme();
      }
    }

    private static class generarReporteAnalisisPaciente_argsStandardScheme extends StandardScheme<generarReporteAnalisisPaciente_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, generarReporteAnalisisPaciente_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLAVE_PACIENTE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clavePaciente = iprot.readString();
                struct.setClavePacienteIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, generarReporteAnalisisPaciente_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clavePaciente != null) {
          oprot.writeFieldBegin(CLAVE_PACIENTE_FIELD_DESC);
          oprot.writeString(struct.clavePaciente);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class generarReporteAnalisisPaciente_argsTupleSchemeFactory implements SchemeFactory {
      public generarReporteAnalisisPaciente_argsTupleScheme getScheme() {
        return new generarReporteAnalisisPaciente_argsTupleScheme();
      }
    }

    private static class generarReporteAnalisisPaciente_argsTupleScheme extends TupleScheme<generarReporteAnalisisPaciente_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, generarReporteAnalisisPaciente_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClavePaciente()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetClavePaciente()) {
          oprot.writeString(struct.clavePaciente);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, generarReporteAnalisisPaciente_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.clavePaciente = iprot.readString();
          struct.setClavePacienteIsSet(true);
        }
      }
    }

  }

  public static class generarReporteAnalisisPaciente_result implements org.apache.thrift.TBase<generarReporteAnalisisPaciente_result, generarReporteAnalisisPaciente_result._Fields>, java.io.Serializable, Cloneable, Comparable<generarReporteAnalisisPaciente_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("generarReporteAnalisisPaciente_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new generarReporteAnalisisPaciente_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new generarReporteAnalisisPaciente_resultTupleSchemeFactory());
    }

    public List<ReporteAnalisisPaciente> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReporteAnalisisPaciente.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(generarReporteAnalisisPaciente_result.class, metaDataMap);
    }

    public generarReporteAnalisisPaciente_result() {
    }

    public generarReporteAnalisisPaciente_result(
      List<ReporteAnalisisPaciente> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public generarReporteAnalisisPaciente_result(generarReporteAnalisisPaciente_result other) {
      if (other.isSetSuccess()) {
        List<ReporteAnalisisPaciente> __this__success = new ArrayList<ReporteAnalisisPaciente>(other.success.size());
        for (ReporteAnalisisPaciente other_element : other.success) {
          __this__success.add(new ReporteAnalisisPaciente(other_element));
        }
        this.success = __this__success;
      }
    }

    public generarReporteAnalisisPaciente_result deepCopy() {
      return new generarReporteAnalisisPaciente_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ReporteAnalisisPaciente> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ReporteAnalisisPaciente elem) {
      if (this.success == null) {
        this.success = new ArrayList<ReporteAnalisisPaciente>();
      }
      this.success.add(elem);
    }

    public List<ReporteAnalisisPaciente> getSuccess() {
      return this.success;
    }

    public generarReporteAnalisisPaciente_result setSuccess(List<ReporteAnalisisPaciente> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ReporteAnalisisPaciente>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof generarReporteAnalisisPaciente_result)
        return this.equals((generarReporteAnalisisPaciente_result)that);
      return false;
    }

    public boolean equals(generarReporteAnalisisPaciente_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(generarReporteAnalisisPaciente_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("generarReporteAnalisisPaciente_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class generarReporteAnalisisPaciente_resultStandardSchemeFactory implements SchemeFactory {
      public generarReporteAnalisisPaciente_resultStandardScheme getScheme() {
        return new generarReporteAnalisisPaciente_resultStandardScheme();
      }
    }

    private static class generarReporteAnalisisPaciente_resultStandardScheme extends StandardScheme<generarReporteAnalisisPaciente_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, generarReporteAnalisisPaciente_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                  struct.success = new ArrayList<ReporteAnalisisPaciente>(_list56.size);
                  for (int _i57 = 0; _i57 < _list56.size; ++_i57)
                  {
                    ReporteAnalisisPaciente _elem58;
                    _elem58 = new ReporteAnalisisPaciente();
                    _elem58.read(iprot);
                    struct.success.add(_elem58);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, generarReporteAnalisisPaciente_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ReporteAnalisisPaciente _iter59 : struct.success)
            {
              _iter59.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class generarReporteAnalisisPaciente_resultTupleSchemeFactory implements SchemeFactory {
      public generarReporteAnalisisPaciente_resultTupleScheme getScheme() {
        return new generarReporteAnalisisPaciente_resultTupleScheme();
      }
    }

    private static class generarReporteAnalisisPaciente_resultTupleScheme extends TupleScheme<generarReporteAnalisisPaciente_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, generarReporteAnalisisPaciente_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ReporteAnalisisPaciente _iter60 : struct.success)
            {
              _iter60.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, generarReporteAnalisisPaciente_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ReporteAnalisisPaciente>(_list61.size);
            for (int _i62 = 0; _i62 < _list61.size; ++_i62)
            {
              ReporteAnalisisPaciente _elem63;
              _elem63 = new ReporteAnalisisPaciente();
              _elem63.read(iprot);
              struct.success.add(_elem63);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class generarReportePacientesAnalisis_args implements org.apache.thrift.TBase<generarReportePacientesAnalisis_args, generarReportePacientesAnalisis_args._Fields>, java.io.Serializable, Cloneable, Comparable<generarReportePacientesAnalisis_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("generarReportePacientesAnalisis_args");

    private static final org.apache.thrift.protocol.TField CLAVE_ANALISIS_FIELD_DESC = new org.apache.thrift.protocol.TField("claveAnalisis", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new generarReportePacientesAnalisis_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new generarReportePacientesAnalisis_argsTupleSchemeFactory());
    }

    public String claveAnalisis; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLAVE_ANALISIS((short)1, "claveAnalisis");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLAVE_ANALISIS
            return CLAVE_ANALISIS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLAVE_ANALISIS, new org.apache.thrift.meta_data.FieldMetaData("claveAnalisis", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(generarReportePacientesAnalisis_args.class, metaDataMap);
    }

    public generarReportePacientesAnalisis_args() {
    }

    public generarReportePacientesAnalisis_args(
      String claveAnalisis)
    {
      this();
      this.claveAnalisis = claveAnalisis;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public generarReportePacientesAnalisis_args(generarReportePacientesAnalisis_args other) {
      if (other.isSetClaveAnalisis()) {
        this.claveAnalisis = other.claveAnalisis;
      }
    }

    public generarReportePacientesAnalisis_args deepCopy() {
      return new generarReportePacientesAnalisis_args(this);
    }

    @Override
    public void clear() {
      this.claveAnalisis = null;
    }

    public String getClaveAnalisis() {
      return this.claveAnalisis;
    }

    public generarReportePacientesAnalisis_args setClaveAnalisis(String claveAnalisis) {
      this.claveAnalisis = claveAnalisis;
      return this;
    }

    public void unsetClaveAnalisis() {
      this.claveAnalisis = null;
    }

    /** Returns true if field claveAnalisis is set (has been assigned a value) and false otherwise */
    public boolean isSetClaveAnalisis() {
      return this.claveAnalisis != null;
    }

    public void setClaveAnalisisIsSet(boolean value) {
      if (!value) {
        this.claveAnalisis = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLAVE_ANALISIS:
        if (value == null) {
          unsetClaveAnalisis();
        } else {
          setClaveAnalisis((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLAVE_ANALISIS:
        return getClaveAnalisis();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLAVE_ANALISIS:
        return isSetClaveAnalisis();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof generarReportePacientesAnalisis_args)
        return this.equals((generarReportePacientesAnalisis_args)that);
      return false;
    }

    public boolean equals(generarReportePacientesAnalisis_args that) {
      if (that == null)
        return false;

      boolean this_present_claveAnalisis = true && this.isSetClaveAnalisis();
      boolean that_present_claveAnalisis = true && that.isSetClaveAnalisis();
      if (this_present_claveAnalisis || that_present_claveAnalisis) {
        if (!(this_present_claveAnalisis && that_present_claveAnalisis))
          return false;
        if (!this.claveAnalisis.equals(that.claveAnalisis))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(generarReportePacientesAnalisis_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClaveAnalisis()).compareTo(other.isSetClaveAnalisis());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClaveAnalisis()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.claveAnalisis, other.claveAnalisis);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("generarReportePacientesAnalisis_args(");
      boolean first = true;

      sb.append("claveAnalisis:");
      if (this.claveAnalisis == null) {
        sb.append("null");
      } else {
        sb.append(this.claveAnalisis);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class generarReportePacientesAnalisis_argsStandardSchemeFactory implements SchemeFactory {
      public generarReportePacientesAnalisis_argsStandardScheme getScheme() {
        return new generarReportePacientesAnalisis_argsStandardScheme();
      }
    }

    private static class generarReportePacientesAnalisis_argsStandardScheme extends StandardScheme<generarReportePacientesAnalisis_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, generarReportePacientesAnalisis_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLAVE_ANALISIS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.claveAnalisis = iprot.readString();
                struct.setClaveAnalisisIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, generarReportePacientesAnalisis_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.claveAnalisis != null) {
          oprot.writeFieldBegin(CLAVE_ANALISIS_FIELD_DESC);
          oprot.writeString(struct.claveAnalisis);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class generarReportePacientesAnalisis_argsTupleSchemeFactory implements SchemeFactory {
      public generarReportePacientesAnalisis_argsTupleScheme getScheme() {
        return new generarReportePacientesAnalisis_argsTupleScheme();
      }
    }

    private static class generarReportePacientesAnalisis_argsTupleScheme extends TupleScheme<generarReportePacientesAnalisis_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, generarReportePacientesAnalisis_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClaveAnalisis()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetClaveAnalisis()) {
          oprot.writeString(struct.claveAnalisis);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, generarReportePacientesAnalisis_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.claveAnalisis = iprot.readString();
          struct.setClaveAnalisisIsSet(true);
        }
      }
    }

  }

  public static class generarReportePacientesAnalisis_result implements org.apache.thrift.TBase<generarReportePacientesAnalisis_result, generarReportePacientesAnalisis_result._Fields>, java.io.Serializable, Cloneable, Comparable<generarReportePacientesAnalisis_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("generarReportePacientesAnalisis_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new generarReportePacientesAnalisis_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new generarReportePacientesAnalisis_resultTupleSchemeFactory());
    }

    public List<ReportePacientesAnalisis> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReportePacientesAnalisis.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(generarReportePacientesAnalisis_result.class, metaDataMap);
    }

    public generarReportePacientesAnalisis_result() {
    }

    public generarReportePacientesAnalisis_result(
      List<ReportePacientesAnalisis> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public generarReportePacientesAnalisis_result(generarReportePacientesAnalisis_result other) {
      if (other.isSetSuccess()) {
        List<ReportePacientesAnalisis> __this__success = new ArrayList<ReportePacientesAnalisis>(other.success.size());
        for (ReportePacientesAnalisis other_element : other.success) {
          __this__success.add(new ReportePacientesAnalisis(other_element));
        }
        this.success = __this__success;
      }
    }

    public generarReportePacientesAnalisis_result deepCopy() {
      return new generarReportePacientesAnalisis_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ReportePacientesAnalisis> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ReportePacientesAnalisis elem) {
      if (this.success == null) {
        this.success = new ArrayList<ReportePacientesAnalisis>();
      }
      this.success.add(elem);
    }

    public List<ReportePacientesAnalisis> getSuccess() {
      return this.success;
    }

    public generarReportePacientesAnalisis_result setSuccess(List<ReportePacientesAnalisis> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ReportePacientesAnalisis>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof generarReportePacientesAnalisis_result)
        return this.equals((generarReportePacientesAnalisis_result)that);
      return false;
    }

    public boolean equals(generarReportePacientesAnalisis_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(generarReportePacientesAnalisis_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("generarReportePacientesAnalisis_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class generarReportePacientesAnalisis_resultStandardSchemeFactory implements SchemeFactory {
      public generarReportePacientesAnalisis_resultStandardScheme getScheme() {
        return new generarReportePacientesAnalisis_resultStandardScheme();
      }
    }

    private static class generarReportePacientesAnalisis_resultStandardScheme extends StandardScheme<generarReportePacientesAnalisis_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, generarReportePacientesAnalisis_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list64 = iprot.readListBegin();
                  struct.success = new ArrayList<ReportePacientesAnalisis>(_list64.size);
                  for (int _i65 = 0; _i65 < _list64.size; ++_i65)
                  {
                    ReportePacientesAnalisis _elem66;
                    _elem66 = new ReportePacientesAnalisis();
                    _elem66.read(iprot);
                    struct.success.add(_elem66);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, generarReportePacientesAnalisis_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ReportePacientesAnalisis _iter67 : struct.success)
            {
              _iter67.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class generarReportePacientesAnalisis_resultTupleSchemeFactory implements SchemeFactory {
      public generarReportePacientesAnalisis_resultTupleScheme getScheme() {
        return new generarReportePacientesAnalisis_resultTupleScheme();
      }
    }

    private static class generarReportePacientesAnalisis_resultTupleScheme extends TupleScheme<generarReportePacientesAnalisis_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, generarReportePacientesAnalisis_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ReportePacientesAnalisis _iter68 : struct.success)
            {
              _iter68.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, generarReportePacientesAnalisis_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list69 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ReportePacientesAnalisis>(_list69.size);
            for (int _i70 = 0; _i70 < _list69.size; ++_i70)
            {
              ReportePacientesAnalisis _elem71;
              _elem71 = new ReportePacientesAnalisis();
              _elem71.read(iprot);
              struct.success.add(_elem71);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class generarReporteDoctoresPaciente_args implements org.apache.thrift.TBase<generarReporteDoctoresPaciente_args, generarReporteDoctoresPaciente_args._Fields>, java.io.Serializable, Cloneable, Comparable<generarReporteDoctoresPaciente_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("generarReporteDoctoresPaciente_args");

    private static final org.apache.thrift.protocol.TField CLAVE_PACIENTE_FIELD_DESC = new org.apache.thrift.protocol.TField("clavePaciente", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new generarReporteDoctoresPaciente_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new generarReporteDoctoresPaciente_argsTupleSchemeFactory());
    }

    public String clavePaciente; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLAVE_PACIENTE((short)1, "clavePaciente");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLAVE_PACIENTE
            return CLAVE_PACIENTE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLAVE_PACIENTE, new org.apache.thrift.meta_data.FieldMetaData("clavePaciente", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(generarReporteDoctoresPaciente_args.class, metaDataMap);
    }

    public generarReporteDoctoresPaciente_args() {
    }

    public generarReporteDoctoresPaciente_args(
      String clavePaciente)
    {
      this();
      this.clavePaciente = clavePaciente;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public generarReporteDoctoresPaciente_args(generarReporteDoctoresPaciente_args other) {
      if (other.isSetClavePaciente()) {
        this.clavePaciente = other.clavePaciente;
      }
    }

    public generarReporteDoctoresPaciente_args deepCopy() {
      return new generarReporteDoctoresPaciente_args(this);
    }

    @Override
    public void clear() {
      this.clavePaciente = null;
    }

    public String getClavePaciente() {
      return this.clavePaciente;
    }

    public generarReporteDoctoresPaciente_args setClavePaciente(String clavePaciente) {
      this.clavePaciente = clavePaciente;
      return this;
    }

    public void unsetClavePaciente() {
      this.clavePaciente = null;
    }

    /** Returns true if field clavePaciente is set (has been assigned a value) and false otherwise */
    public boolean isSetClavePaciente() {
      return this.clavePaciente != null;
    }

    public void setClavePacienteIsSet(boolean value) {
      if (!value) {
        this.clavePaciente = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLAVE_PACIENTE:
        if (value == null) {
          unsetClavePaciente();
        } else {
          setClavePaciente((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLAVE_PACIENTE:
        return getClavePaciente();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLAVE_PACIENTE:
        return isSetClavePaciente();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof generarReporteDoctoresPaciente_args)
        return this.equals((generarReporteDoctoresPaciente_args)that);
      return false;
    }

    public boolean equals(generarReporteDoctoresPaciente_args that) {
      if (that == null)
        return false;

      boolean this_present_clavePaciente = true && this.isSetClavePaciente();
      boolean that_present_clavePaciente = true && that.isSetClavePaciente();
      if (this_present_clavePaciente || that_present_clavePaciente) {
        if (!(this_present_clavePaciente && that_present_clavePaciente))
          return false;
        if (!this.clavePaciente.equals(that.clavePaciente))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(generarReporteDoctoresPaciente_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClavePaciente()).compareTo(other.isSetClavePaciente());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClavePaciente()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clavePaciente, other.clavePaciente);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("generarReporteDoctoresPaciente_args(");
      boolean first = true;

      sb.append("clavePaciente:");
      if (this.clavePaciente == null) {
        sb.append("null");
      } else {
        sb.append(this.clavePaciente);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class generarReporteDoctoresPaciente_argsStandardSchemeFactory implements SchemeFactory {
      public generarReporteDoctoresPaciente_argsStandardScheme getScheme() {
        return new generarReporteDoctoresPaciente_argsStandardScheme();
      }
    }

    private static class generarReporteDoctoresPaciente_argsStandardScheme extends StandardScheme<generarReporteDoctoresPaciente_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, generarReporteDoctoresPaciente_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLAVE_PACIENTE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clavePaciente = iprot.readString();
                struct.setClavePacienteIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, generarReporteDoctoresPaciente_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clavePaciente != null) {
          oprot.writeFieldBegin(CLAVE_PACIENTE_FIELD_DESC);
          oprot.writeString(struct.clavePaciente);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class generarReporteDoctoresPaciente_argsTupleSchemeFactory implements SchemeFactory {
      public generarReporteDoctoresPaciente_argsTupleScheme getScheme() {
        return new generarReporteDoctoresPaciente_argsTupleScheme();
      }
    }

    private static class generarReporteDoctoresPaciente_argsTupleScheme extends TupleScheme<generarReporteDoctoresPaciente_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, generarReporteDoctoresPaciente_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClavePaciente()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetClavePaciente()) {
          oprot.writeString(struct.clavePaciente);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, generarReporteDoctoresPaciente_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.clavePaciente = iprot.readString();
          struct.setClavePacienteIsSet(true);
        }
      }
    }

  }

  public static class generarReporteDoctoresPaciente_result implements org.apache.thrift.TBase<generarReporteDoctoresPaciente_result, generarReporteDoctoresPaciente_result._Fields>, java.io.Serializable, Cloneable, Comparable<generarReporteDoctoresPaciente_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("generarReporteDoctoresPaciente_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new generarReporteDoctoresPaciente_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new generarReporteDoctoresPaciente_resultTupleSchemeFactory());
    }

    public List<ReporteDoctoresPaciente> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReporteDoctoresPaciente.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(generarReporteDoctoresPaciente_result.class, metaDataMap);
    }

    public generarReporteDoctoresPaciente_result() {
    }

    public generarReporteDoctoresPaciente_result(
      List<ReporteDoctoresPaciente> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public generarReporteDoctoresPaciente_result(generarReporteDoctoresPaciente_result other) {
      if (other.isSetSuccess()) {
        List<ReporteDoctoresPaciente> __this__success = new ArrayList<ReporteDoctoresPaciente>(other.success.size());
        for (ReporteDoctoresPaciente other_element : other.success) {
          __this__success.add(new ReporteDoctoresPaciente(other_element));
        }
        this.success = __this__success;
      }
    }

    public generarReporteDoctoresPaciente_result deepCopy() {
      return new generarReporteDoctoresPaciente_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ReporteDoctoresPaciente> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ReporteDoctoresPaciente elem) {
      if (this.success == null) {
        this.success = new ArrayList<ReporteDoctoresPaciente>();
      }
      this.success.add(elem);
    }

    public List<ReporteDoctoresPaciente> getSuccess() {
      return this.success;
    }

    public generarReporteDoctoresPaciente_result setSuccess(List<ReporteDoctoresPaciente> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ReporteDoctoresPaciente>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof generarReporteDoctoresPaciente_result)
        return this.equals((generarReporteDoctoresPaciente_result)that);
      return false;
    }

    public boolean equals(generarReporteDoctoresPaciente_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(generarReporteDoctoresPaciente_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("generarReporteDoctoresPaciente_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class generarReporteDoctoresPaciente_resultStandardSchemeFactory implements SchemeFactory {
      public generarReporteDoctoresPaciente_resultStandardScheme getScheme() {
        return new generarReporteDoctoresPaciente_resultStandardScheme();
      }
    }

    private static class generarReporteDoctoresPaciente_resultStandardScheme extends StandardScheme<generarReporteDoctoresPaciente_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, generarReporteDoctoresPaciente_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list72 = iprot.readListBegin();
                  struct.success = new ArrayList<ReporteDoctoresPaciente>(_list72.size);
                  for (int _i73 = 0; _i73 < _list72.size; ++_i73)
                  {
                    ReporteDoctoresPaciente _elem74;
                    _elem74 = new ReporteDoctoresPaciente();
                    _elem74.read(iprot);
                    struct.success.add(_elem74);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, generarReporteDoctoresPaciente_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ReporteDoctoresPaciente _iter75 : struct.success)
            {
              _iter75.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class generarReporteDoctoresPaciente_resultTupleSchemeFactory implements SchemeFactory {
      public generarReporteDoctoresPaciente_resultTupleScheme getScheme() {
        return new generarReporteDoctoresPaciente_resultTupleScheme();
      }
    }

    private static class generarReporteDoctoresPaciente_resultTupleScheme extends TupleScheme<generarReporteDoctoresPaciente_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, generarReporteDoctoresPaciente_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ReporteDoctoresPaciente _iter76 : struct.success)
            {
              _iter76.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, generarReporteDoctoresPaciente_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list77 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ReporteDoctoresPaciente>(_list77.size);
            for (int _i78 = 0; _i78 < _list77.size; ++_i78)
            {
              ReporteDoctoresPaciente _elem79;
              _elem79 = new ReporteDoctoresPaciente();
              _elem79.read(iprot);
              struct.success.add(_elem79);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class generarReportePacientesDoctor_args implements org.apache.thrift.TBase<generarReportePacientesDoctor_args, generarReportePacientesDoctor_args._Fields>, java.io.Serializable, Cloneable, Comparable<generarReportePacientesDoctor_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("generarReportePacientesDoctor_args");

    private static final org.apache.thrift.protocol.TField CLAVE_DOCTOR_FIELD_DESC = new org.apache.thrift.protocol.TField("claveDoctor", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new generarReportePacientesDoctor_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new generarReportePacientesDoctor_argsTupleSchemeFactory());
    }

    public String claveDoctor; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLAVE_DOCTOR((short)1, "claveDoctor");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLAVE_DOCTOR
            return CLAVE_DOCTOR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLAVE_DOCTOR, new org.apache.thrift.meta_data.FieldMetaData("claveDoctor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(generarReportePacientesDoctor_args.class, metaDataMap);
    }

    public generarReportePacientesDoctor_args() {
    }

    public generarReportePacientesDoctor_args(
      String claveDoctor)
    {
      this();
      this.claveDoctor = claveDoctor;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public generarReportePacientesDoctor_args(generarReportePacientesDoctor_args other) {
      if (other.isSetClaveDoctor()) {
        this.claveDoctor = other.claveDoctor;
      }
    }

    public generarReportePacientesDoctor_args deepCopy() {
      return new generarReportePacientesDoctor_args(this);
    }

    @Override
    public void clear() {
      this.claveDoctor = null;
    }

    public String getClaveDoctor() {
      return this.claveDoctor;
    }

    public generarReportePacientesDoctor_args setClaveDoctor(String claveDoctor) {
      this.claveDoctor = claveDoctor;
      return this;
    }

    public void unsetClaveDoctor() {
      this.claveDoctor = null;
    }

    /** Returns true if field claveDoctor is set (has been assigned a value) and false otherwise */
    public boolean isSetClaveDoctor() {
      return this.claveDoctor != null;
    }

    public void setClaveDoctorIsSet(boolean value) {
      if (!value) {
        this.claveDoctor = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLAVE_DOCTOR:
        if (value == null) {
          unsetClaveDoctor();
        } else {
          setClaveDoctor((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLAVE_DOCTOR:
        return getClaveDoctor();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLAVE_DOCTOR:
        return isSetClaveDoctor();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof generarReportePacientesDoctor_args)
        return this.equals((generarReportePacientesDoctor_args)that);
      return false;
    }

    public boolean equals(generarReportePacientesDoctor_args that) {
      if (that == null)
        return false;

      boolean this_present_claveDoctor = true && this.isSetClaveDoctor();
      boolean that_present_claveDoctor = true && that.isSetClaveDoctor();
      if (this_present_claveDoctor || that_present_claveDoctor) {
        if (!(this_present_claveDoctor && that_present_claveDoctor))
          return false;
        if (!this.claveDoctor.equals(that.claveDoctor))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(generarReportePacientesDoctor_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClaveDoctor()).compareTo(other.isSetClaveDoctor());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClaveDoctor()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.claveDoctor, other.claveDoctor);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("generarReportePacientesDoctor_args(");
      boolean first = true;

      sb.append("claveDoctor:");
      if (this.claveDoctor == null) {
        sb.append("null");
      } else {
        sb.append(this.claveDoctor);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class generarReportePacientesDoctor_argsStandardSchemeFactory implements SchemeFactory {
      public generarReportePacientesDoctor_argsStandardScheme getScheme() {
        return new generarReportePacientesDoctor_argsStandardScheme();
      }
    }

    private static class generarReportePacientesDoctor_argsStandardScheme extends StandardScheme<generarReportePacientesDoctor_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, generarReportePacientesDoctor_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLAVE_DOCTOR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.claveDoctor = iprot.readString();
                struct.setClaveDoctorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, generarReportePacientesDoctor_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.claveDoctor != null) {
          oprot.writeFieldBegin(CLAVE_DOCTOR_FIELD_DESC);
          oprot.writeString(struct.claveDoctor);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class generarReportePacientesDoctor_argsTupleSchemeFactory implements SchemeFactory {
      public generarReportePacientesDoctor_argsTupleScheme getScheme() {
        return new generarReportePacientesDoctor_argsTupleScheme();
      }
    }

    private static class generarReportePacientesDoctor_argsTupleScheme extends TupleScheme<generarReportePacientesDoctor_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, generarReportePacientesDoctor_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClaveDoctor()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetClaveDoctor()) {
          oprot.writeString(struct.claveDoctor);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, generarReportePacientesDoctor_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.claveDoctor = iprot.readString();
          struct.setClaveDoctorIsSet(true);
        }
      }
    }

  }

  public static class generarReportePacientesDoctor_result implements org.apache.thrift.TBase<generarReportePacientesDoctor_result, generarReportePacientesDoctor_result._Fields>, java.io.Serializable, Cloneable, Comparable<generarReportePacientesDoctor_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("generarReportePacientesDoctor_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new generarReportePacientesDoctor_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new generarReportePacientesDoctor_resultTupleSchemeFactory());
    }

    public List<ReportePacientesDoctor> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReportePacientesDoctor.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(generarReportePacientesDoctor_result.class, metaDataMap);
    }

    public generarReportePacientesDoctor_result() {
    }

    public generarReportePacientesDoctor_result(
      List<ReportePacientesDoctor> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public generarReportePacientesDoctor_result(generarReportePacientesDoctor_result other) {
      if (other.isSetSuccess()) {
        List<ReportePacientesDoctor> __this__success = new ArrayList<ReportePacientesDoctor>(other.success.size());
        for (ReportePacientesDoctor other_element : other.success) {
          __this__success.add(new ReportePacientesDoctor(other_element));
        }
        this.success = __this__success;
      }
    }

    public generarReportePacientesDoctor_result deepCopy() {
      return new generarReportePacientesDoctor_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ReportePacientesDoctor> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ReportePacientesDoctor elem) {
      if (this.success == null) {
        this.success = new ArrayList<ReportePacientesDoctor>();
      }
      this.success.add(elem);
    }

    public List<ReportePacientesDoctor> getSuccess() {
      return this.success;
    }

    public generarReportePacientesDoctor_result setSuccess(List<ReportePacientesDoctor> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ReportePacientesDoctor>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof generarReportePacientesDoctor_result)
        return this.equals((generarReportePacientesDoctor_result)that);
      return false;
    }

    public boolean equals(generarReportePacientesDoctor_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(generarReportePacientesDoctor_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("generarReportePacientesDoctor_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class generarReportePacientesDoctor_resultStandardSchemeFactory implements SchemeFactory {
      public generarReportePacientesDoctor_resultStandardScheme getScheme() {
        return new generarReportePacientesDoctor_resultStandardScheme();
      }
    }

    private static class generarReportePacientesDoctor_resultStandardScheme extends StandardScheme<generarReportePacientesDoctor_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, generarReportePacientesDoctor_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list80 = iprot.readListBegin();
                  struct.success = new ArrayList<ReportePacientesDoctor>(_list80.size);
                  for (int _i81 = 0; _i81 < _list80.size; ++_i81)
                  {
                    ReportePacientesDoctor _elem82;
                    _elem82 = new ReportePacientesDoctor();
                    _elem82.read(iprot);
                    struct.success.add(_elem82);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, generarReportePacientesDoctor_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ReportePacientesDoctor _iter83 : struct.success)
            {
              _iter83.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class generarReportePacientesDoctor_resultTupleSchemeFactory implements SchemeFactory {
      public generarReportePacientesDoctor_resultTupleScheme getScheme() {
        return new generarReportePacientesDoctor_resultTupleScheme();
      }
    }

    private static class generarReportePacientesDoctor_resultTupleScheme extends TupleScheme<generarReportePacientesDoctor_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, generarReportePacientesDoctor_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ReportePacientesDoctor _iter84 : struct.success)
            {
              _iter84.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, generarReportePacientesDoctor_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list85 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ReportePacientesDoctor>(_list85.size);
            for (int _i86 = 0; _i86 < _list85.size; ++_i86)
            {
              ReportePacientesDoctor _elem87;
              _elem87 = new ReportePacientesDoctor();
              _elem87.read(iprot);
              struct.success.add(_elem87);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
